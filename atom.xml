<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>linkfqy</title>
  
  <subtitle>A link to the past.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://oi.linkfqy.top/"/>
  <updated>2021-08-05T16:51:59.725Z</updated>
  <id>http://oi.linkfqy.top/</id>
  
  <author>
    <name>linkfqy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SciPy解非线性规划</title>
    <link href="http://oi.linkfqy.top/posts/SciPy%E8%A7%A3%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
    <id>http://oi.linkfqy.top/posts/SciPy解非线性规划/</id>
    <published>2021-08-05T15:59:25.000Z</published>
    <updated>2021-08-05T16:51:59.725Z</updated>
    
    <content type="html"><![CDATA[<p>与线性规划不同，非线性规划的目标函数和约束都不一定是线性的</p><p>因此最优解也不一定在可行域边界上，一般而言用迭代算法得到的也只是局部最优解</p><p>标准模型如下： <span class="math display">\[\min f(\vec x)  \\\text{s.t.}\begin{cases}    g_i(\vec x) \geq 0,\ \ \ i=1,2,...,m,  \\    h_i(\vec x) = 0,\ \ \ i=1,2,...,l,\end{cases}\]</span> <code>scipy.optimize.minimize</code>可以解决非线性规划问题</p><p>用法：</p><p><code>minimize(fun,x0,bounds=None,constraints=None)</code></p><p>其中<code>fun</code>为目标函数，输入一个向量<span class="math inline">\(\vec x\)</span>返回对应值</p><p><code>x0</code>为迭代初值，决定是否能取到全局最优解</p><p><code>bounds</code>与线性规划的<code>linprog</code>一样</p><p><code>constraints</code>为约束条件，具体实现为单个dict或dict的序列，每个dict应有两个键值：</p><ul><li><p><code>type</code>：字符串<code>'eq'</code>和<code>'ineq'</code>之一，表示该约束为等号约束或不等号约束</p></li><li><p><code>fun</code>：函数，传入向量<span class="math inline">\(\vec x\)</span>，返回约束式的左值，在可行解中该值大于等于0（不等号约束）/等于0（等号约束）</p><p>特别地，若有一系列约束为线性约束，则可将一系列右值视为一个向量，利用<code>numpy.array</code>重载的比较符号，</p><p>将这些约束缩为一个，即<code>lambda x:b-A@x</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;与线性规划不同，非线性规划的目标函数和约束都不一定是线性的&lt;/p&gt;
&lt;p&gt;因此最优解也不一定在可行域边界上，一般而言用迭代算法得到的也只是局部最优解&lt;/p&gt;
&lt;p&gt;标准模型如下： &lt;span class=&quot;math display&quot;&gt;\[
\min f(\vec x)
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://oi.linkfqy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://oi.linkfqy.top/tags/Python/"/>
    
      <category term="SciPy" scheme="http://oi.linkfqy.top/tags/SciPy/"/>
    
  </entry>
  
  <entry>
    <title>SciPy解决线性规划问题</title>
    <link href="http://oi.linkfqy.top/posts/SciPy%E8%A7%A3%E5%86%B3%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/"/>
    <id>http://oi.linkfqy.top/posts/SciPy解决线性规划问题/</id>
    <published>2021-08-04T12:25:14.000Z</published>
    <updated>2021-08-04T15:55:17.828Z</updated>
    
    <content type="html"><![CDATA[<p><code>scipy.optimize.linprog</code>可以解决线性规划问题</p><p>标准模型： <span class="math display">\[\min_x \ z= c^T x, \\        \mbox{s.t.} \        \begin{cases}            A x \leq b,\\            A_{eq} x = b_{eq},\\            l \leq x \leq u .        \end{cases}\]</span> 其中<span class="math inline">\(A\)</span>和<span class="math inline">\(A_{eq}\)</span>分别是不等约束和等号约束的系数矩阵，<span class="math inline">\(l\)</span>和<span class="math inline">\(u\)</span>是上下界向量</p><p>用法：</p><p><code>linprog(c, A=None, b=None, Aeq=None, beq=None, bounds=None)</code></p><p>前5个参数对应标准模型，bounds是一个由<code>(li,ui)</code>组成的序列，表示每个<code>xi</code>的边界</p><p>当<code>bounds</code>为<code>None</code>时，默认下界全为0，上界全为正无穷</p><p>返回的对象记为<code>res</code>，具有以下属性：</p><p><code>res.fun</code>为目标函数的最小值，<code>res.x</code>为最优解</p><p>示例： <span class="math display">\[\min_x \ z= -x_1+4x_2, \\        \mbox{s.t.} \        \begin{cases}            -3x_1+x_2 \leq 6,\\            x_1+2x_2 \leq 4,\\            x_2 \geq -3 .        \end{cases}\]</span></p><p>两种方式求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> linprog</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">c = [<span class="number">-1</span>, <span class="number">4</span>]</span><br><span class="line">A = [[<span class="number">-3</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">b = [<span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line">bounds = [[<span class="keyword">None</span>, <span class="keyword">None</span>], [<span class="number">-3</span>, <span class="keyword">None</span>]]</span><br><span class="line"><span class="comment"># A = [[-3, 1], [1, 2], [0, -1]]</span></span><br><span class="line"><span class="comment"># b = [6, 4, 3]</span></span><br><span class="line"><span class="comment"># bounds = [[None, None], [None, None]]  # 与bounds=None区别</span></span><br><span class="line">res = linprog(c, A, b, <span class="keyword">None</span>, <span class="keyword">None</span>, bounds)</span><br><span class="line">print(res.fun)</span><br><span class="line">print(res.x)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-21.99999984082492</span></span><br><span class="line">[ <span class="number">9.99999989</span> <span class="number">-2.99999999</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;scipy.optimize.linprog&lt;/code&gt;可以解决线性规划问题&lt;/p&gt;
&lt;p&gt;标准模型： &lt;span class=&quot;math display&quot;&gt;\[
\min_x \ z= c^T x, \\
        \mbox{s.t.} \

      
    
    </summary>
    
      <category term="学习笔记" scheme="http://oi.linkfqy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://oi.linkfqy.top/tags/Python/"/>
    
      <category term="SciPy" scheme="http://oi.linkfqy.top/tags/SciPy/"/>
    
  </entry>
  
  <entry>
    <title>SymPy实现高等数学符号解</title>
    <link href="http://oi.linkfqy.top/posts/SymPy%E5%AE%9E%E7%8E%B0%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E8%A7%A3/"/>
    <id>http://oi.linkfqy.top/posts/SymPy实现高等数学符号解/</id>
    <published>2021-08-03T01:42:19.000Z</published>
    <updated>2021-08-04T01:44:00.847Z</updated>
    
    <content type="html"><![CDATA[<p>一些前置知识：</p><p><code>x=symbols('x')</code>声明变量<span class="math inline">\(x\)</span></p><p><code>y.subs(x,x0)</code><span class="math inline">\(y\)</span>是<span class="math inline">\(x\)</span>的表达式时，带入<span class="math inline">\(x=x_0\)</span>的值</p><p><code>y.n()</code>常量表达式求浮点值</p><h1 id="求极限">求极限</h1><p><code>limit(e, z, z0, dir=&quot;+&quot;)</code></p><p><span class="math inline">\(e\)</span>是<span class="math inline">\(z\)</span>的表达式，求<span class="math inline">\(e(z)\)</span>在<span class="math inline">\(z_0\)</span>处的极限，<span class="math inline">\(\text{dir}\)</span>可以指定是<span class="math inline">\(z_0^+\)</span>还是<span class="math inline">\(z_0^-\)</span></p><p>以下计算了<span class="math inline">\(\lim_{x\rightarrow 0}\frac{\sin x}x\)</span>，<span class="math inline">\(\lim_{x\rightarrow \infty} (1+\frac 1 x)^x\)</span>，<span class="math inline">\(\lim_{x\rightarrow 0}\sin(\frac 1 x)\)</span>三个极限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">x = symbols(<span class="string">'x'</span>)</span><br><span class="line">print(limit(sin(x)/x, x, <span class="number">0</span>))</span><br><span class="line">print(limit(pow(<span class="number">1</span>+<span class="number">1</span>/x, x), x, oo))</span><br><span class="line">print(limit(sin(<span class="number">1</span>/x), x, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">E</span><br><span class="line">AccumBounds(<span class="number">-1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="求导数">求导数</h1><p><code>diff(expr,x1,n1,x2,n2,...)</code></p><p>表达式<code>expr</code>依次对<code>xi</code>求<code>ni</code>阶偏导，<code>ni</code>不写默认为1</p><p><span class="math inline">\(z=\sin x+x^2e^y\)</span>，求<span class="math inline">\(\frac{\partial^2 z}{\partial x^2},\frac{\partial z}{\partial y},\frac{\partial^2 z}{\partial x\partial y}\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">x, y = symbols(<span class="string">"x y"</span>)</span><br><span class="line">z = sin(x)+x**<span class="number">2</span>*exp(y)</span><br><span class="line">print(diff(z, x, <span class="number">2</span>))</span><br><span class="line">print(diff(z, y))</span><br><span class="line">print(diff(z, x, y))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>*exp(<span class="name">y</span>) - sin(<span class="name">x</span>)</span><br><span class="line">x**2*exp(<span class="name">y</span>)</span><br><span class="line"><span class="number">2</span>*x*exp(<span class="name">y</span>)</span><br></pre></td></tr></table></figure><h1 id="级数求和">级数求和</h1><p><code>summation(expr,(i,a,b))</code></p><p>expr是关于i的函数，求<span class="math inline">\(\sum_{i=a}^b expr(i)\)</span></p><p>示例：<span class="math inline">\(\sum_{k=1}^n k^2\)</span>和<span class="math inline">\(\sum_{k=1}^\infty \frac 1 {k^2}\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">k, n = symbols(<span class="string">'k n'</span>)</span><br><span class="line">print(factor(summation(k**<span class="number">2</span>, (k, <span class="number">1</span>, n))))  <span class="comment"># 计算结果因式分解</span></span><br><span class="line">print(summation(<span class="number">1</span>/k**<span class="number">2</span>, (k, <span class="number">1</span>, oo)))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n*(n + <span class="number">1</span>)*(<span class="number">2</span>*n + <span class="number">1</span>)/<span class="number">6</span></span><br><span class="line">pi**<span class="number">2</span>/<span class="number">6</span></span><br></pre></td></tr></table></figure><h1 id="泰勒展开">泰勒展开</h1><p><code>series(expr, x=None, x0=0, n=6, dir=&quot;+&quot;)</code></p><p><span class="math inline">\(expr\)</span>是<span class="math inline">\(x\)</span>的表达式，在<span class="math inline">\(x_0\)</span>处的<span class="math inline">\(n\)</span>阶展开，<span class="math inline">\(\text{dir}\)</span>可以指定是<span class="math inline">\(x_0^+\)</span>还是<span class="math inline">\(x_0^-\)</span></p><p>下面演示了<span class="math inline">\(\sin x\)</span>在0点的3，5，7阶泰勒展开式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> rc</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.plotting <span class="keyword">import</span> *</span><br><span class="line">rc(<span class="string">'font'</span>, size=<span class="number">16</span>)</span><br><span class="line">x = symbols(<span class="string">'x'</span>)</span><br><span class="line">y = sin(x)</span><br><span class="line">yi = list(range(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>):</span><br><span class="line">    print(series(y, x, <span class="number">0</span>, k))</span><br><span class="line">    yi[k] = series(y, x, <span class="number">0</span>, k).removeO()  <span class="comment"># 带有余项的表达式无法作图</span></span><br><span class="line">plot(y, yi[<span class="number">3</span>], yi[<span class="number">5</span>], yi[<span class="number">7</span>], (x, <span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">     xlabel=<span class="string">'$x$'</span>, ylabel=<span class="string">'$y$'</span>).save(<span class="string">'series.png'</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">x</span> + O(<span class="keyword">x</span>**<span class="number">3</span>)</span><br><span class="line"><span class="keyword">x</span> - <span class="keyword">x</span>**<span class="number">3</span>/<span class="number">6</span> + O(<span class="keyword">x</span>**<span class="number">5</span>)</span><br><span class="line"><span class="keyword">x</span> - <span class="keyword">x</span>**<span class="number">3</span>/<span class="number">6</span> + <span class="keyword">x</span>**<span class="number">5</span>/<span class="number">120</span> + O(<span class="keyword">x</span>**<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p><img src="/posts/SymPy实现高等数学符号解/series.png"></p><h1 id="积分">积分</h1><p>不定积分：</p><p><code>integrate(f,x)</code></p><p>相当于<span class="math inline">\(\int f(x)\mathrm d x\)</span></p><p>定积分：</p><p><code>integrate(f,(x,a,b))</code></p><p>相当于<span class="math inline">\(\int_a^b f(x)\mathrm d x\)</span></p><p>以下代码求解<span class="math inline">\(\int_0^\pi \sin(2x)\mathrm d x,\int_0^{+\infty} \frac {\sin(x)} x\mathrm d x,\int \sin(x)e^x\mathrm d x\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">x = symbols(<span class="string">'x'</span>)</span><br><span class="line">print(integrate(sin(<span class="number">2</span>*x), (x, <span class="number">0</span>, pi)))</span><br><span class="line">print(integrate(sin(x)/x, (x, <span class="number">0</span>, oo)))</span><br><span class="line">print(integrate(sin(x)*exp(x), x))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">pi/2</span><br><span class="line">exp(<span class="name">x</span>)*sin(<span class="name">x</span>)/2 - exp(<span class="name">x</span>)*cos(<span class="name">x</span>)/2</span><br></pre></td></tr></table></figure><h1 id="解代数方程组">解代数方程（组）</h1><p><code>solve(expr,x)</code></p><p>求解方程<span class="math inline">\(expr=0\)</span>，其中<span class="math inline">\(x\)</span>是自变量</p><p>返回一个list存放所有的根</p><p><code>solve([...,expr_i,...],[...,x_i,...])</code></p><p>求解方程组，其中<span class="math inline">\(expr_i\)</span>对应<span class="math inline">\(x_i\)</span></p><p>返回一个list存放所有根，每个根用一个tuple表示，对应此根所有各个变量的值</p><p><code>roots(expr,x)</code></p><p>返回一个dict，表示每个根以及它的重数</p><p>示例： <span class="math display">\[x^3-1=0 \\(x-2)^2(x-1)^3=0  \\\begin{equation}    \begin{cases}    x^2+y^2=1  \\    x-y=0    \end{cases}\end{equation}\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">x, y = symbols(<span class="string">"x y"</span>)</span><br><span class="line">print(solve(x**<span class="number">3</span><span class="number">-1</span>, x))</span><br><span class="line">print(solve((x<span class="number">-2</span>)**<span class="number">2</span>*(x<span class="number">-1</span>)**<span class="number">3</span>, x))</span><br><span class="line">print(roots((x<span class="number">-2</span>)**<span class="number">2</span>*(x<span class="number">-1</span>)**<span class="number">3</span>, x))</span><br><span class="line">print(solve([x**<span class="number">2</span>+y**<span class="number">2</span><span class="number">-1</span>, x-y], [x, y]))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">-1</span>/<span class="number">2</span> - sqrt(<span class="number">3</span>)*I/2, <span class="number">-1</span>/<span class="number">2</span> + sqrt(<span class="number">3</span>)*I/2]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">3</span>&#125;</span><br><span class="line">[(<span class="name">-sqrt</span>(<span class="number">2</span>)/<span class="number">2</span>, -sqrt(<span class="number">2</span>)/<span class="number">2</span>), (<span class="name">sqrt</span>(<span class="number">2</span>)/<span class="number">2</span>, sqrt(<span class="number">2</span>)/<span class="number">2</span>)]</span><br></pre></td></tr></table></figure><h1 id="微分方程组的通解">微分方程（组）的通解</h1><p>微分方程中的<span class="math inline">\(y\)</span>是关于<span class="math inline">\(x\)</span>的函数，而且是未知函数，而非未知量，因此要将<span class="math inline">\(y\)</span>声明为Function</p><p><code>y=Function('y')</code></p><p><code>y=symbols('y',cls=Function)</code></p><p>两种写法都是可以的</p><p><code>dsolve(eq,f(x),ics=)</code>，其中<code>eq</code>是关于<code>f(x)</code>的表达式，求解<span class="math inline">\(eq=0\)</span></p><p>ics可以以一个dict指定f(x)的初值</p><p>示例： <span class="math display">\[y&#39;&#39;-5y&#39;+6y=0  \\y&#39;&#39;-5y&#39;+6y=xe^{2x}  \\y&#39;&#39;-5y&#39;+6y=0,y(0)=1,y&#39;(0)=0  \\y&#39;&#39;-5y&#39;+6y=xe^{2x},y(0)=1,y(2)=0\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">x = symbols(<span class="string">'x'</span>)</span><br><span class="line">y = Function(<span class="string">'y'</span>)</span><br><span class="line">eq1 = diff(y(x), x, <span class="number">2</span>)<span class="number">-5</span>*diff(y(x), x)+<span class="number">6</span>*y(x)</span><br><span class="line">eq2 = diff(y(x), x, <span class="number">2</span>)<span class="number">-5</span>*diff(y(x), x)+<span class="number">6</span>*y(x)-x*exp(<span class="number">2</span>*x)</span><br><span class="line">print(dsolve(eq1, y(x)))</span><br><span class="line">print(dsolve(eq2, y(x)))</span><br><span class="line">print(dsolve(eq1, y(x), ics=&#123;y(<span class="number">0</span>): <span class="number">1</span>, diff(y(x), x).subs(x, <span class="number">0</span>): <span class="number">0</span>&#125;))</span><br><span class="line">print(dsolve(eq2, y(x), ics=&#123;y(<span class="number">0</span>): <span class="number">1</span>, y(<span class="number">2</span>): <span class="number">0</span>&#125;))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E<span class="string">q(y(x)</span>, (C1 + C2*<span class="keyword">exp</span>(<span class="keyword">x</span>))*<span class="keyword">exp</span>(<span class="number">2</span>*<span class="keyword">x</span>))</span><br><span class="line">E<span class="string">q(y(x)</span>, (C1 + C2*<span class="keyword">exp</span>(<span class="keyword">x</span>) - <span class="keyword">x</span>**<span class="number">2</span>/<span class="number">2</span> - <span class="keyword">x</span>)*<span class="keyword">exp</span>(<span class="number">2</span>*<span class="keyword">x</span>))</span><br><span class="line">E<span class="string">q(y(x)</span>, (<span class="number">3</span> - <span class="number">2</span>*<span class="keyword">exp</span>(<span class="keyword">x</span>))*<span class="keyword">exp</span>(<span class="number">2</span>*<span class="keyword">x</span>))</span><br><span class="line">E<span class="string">q(y(x)</span>, (-<span class="keyword">x</span>**<span class="number">2</span>/<span class="number">2</span> - <span class="keyword">x</span> - <span class="number">3</span>*<span class="keyword">exp</span>(<span class="keyword">x</span>)/(<span class="number">1</span> - <span class="keyword">exp</span>(<span class="number">2</span>)) + (<span class="number">4</span> - <span class="keyword">exp</span>(<span class="number">2</span>))/(<span class="number">1</span> - <span class="keyword">exp</span>(<span class="number">2</span>)))*<span class="keyword">exp</span>(<span class="number">2</span>*<span class="keyword">x</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一些前置知识：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x=symbols(&#39;x&#39;)&lt;/code&gt;声明变量&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;y.subs(x,x0)&lt;/code&gt;&lt;span class=&quot;math 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://oi.linkfqy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://oi.linkfqy.top/tags/Python/"/>
    
      <category term="SymPy" scheme="http://oi.linkfqy.top/tags/SymPy/"/>
    
  </entry>
  
  <entry>
    <title>SymPy符号制图</title>
    <link href="http://oi.linkfqy.top/posts/SymPy%E7%AC%A6%E5%8F%B7%E5%88%B6%E5%9B%BE/"/>
    <id>http://oi.linkfqy.top/posts/SymPy符号制图/</id>
    <published>2021-08-02T07:03:59.000Z</published>
    <updated>2021-08-03T01:43:38.730Z</updated>
    
    <content type="html"><![CDATA[<p>与Matplotlib不同，SymPy无需离散的数据，仅需符号表达式即可制图</p><h1 id="二维曲线">二维曲线</h1><p>单个图像：</p><p><code>plot(expr, range, **kwargs)</code></p><p>其中<code>expr</code>为表达式，表达式由<code>sympy.abc</code>导入的符号组成</p><p><code>range</code>为三元组<code>(x,l,r)</code>，指定了自变量以及上下界</p><p><code>**kwargs</code>指定的参数与<code>matplotlib</code>类似，这里不做过多介绍</p><p>多个图像在同一范围：</p><p><code>plot(expr1, expr2, ..., range, **kwargs)</code></p><p>多个图像在不同范围：</p><p><code>plot((expr1, range1), (expr2, range2), ..., **kwargs)</code></p><p>以下代码画出了<span class="math inline">\(y_1=2\sin x,\ x\in [-6,6]\)</span>和<span class="math inline">\(y_2=\cos(x+\frac \pi 4),\ x\in [-5,5]\)</span>的图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.plotting <span class="keyword">import</span> plot</span><br><span class="line"><span class="keyword">from</span> sympy.abc <span class="keyword">import</span> x, pi</span><br><span class="line"><span class="keyword">from</span> sympy.functions <span class="keyword">import</span> sin, cos</span><br><span class="line">p = plot((<span class="number">2</span>*sin(x), (x, <span class="number">-6</span>, <span class="number">6</span>)), (cos(x+pi/<span class="number">4</span>), (x, <span class="number">-5</span>, <span class="number">5</span>)),</span><br><span class="line">         show=<span class="keyword">False</span>, xlabel=<span class="string">'$x$'</span>, ylabel=<span class="string">'$y$'</span>)</span><br><span class="line">p.save(<span class="string">"plot.png"</span>)</span><br><span class="line">p.show()</span><br></pre></td></tr></table></figure><p><img src="/posts/SymPy符号制图/plot.png"></p><h1 id="三维曲线">三维曲线</h1><p><span class="math inline">\(z=\sin(\sqrt{x^2+y^2})\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> rc</span><br><span class="line"><span class="keyword">from</span> sympy.plotting <span class="keyword">import</span> plot3d</span><br><span class="line"><span class="keyword">from</span> sympy.abc <span class="keyword">import</span> x, y</span><br><span class="line"><span class="keyword">from</span> sympy.functions <span class="keyword">import</span> sin, sqrt</span><br><span class="line">rc(<span class="string">'font'</span>, size=<span class="number">16</span>)</span><br><span class="line">p = plot3d(sin(sqrt(x**<span class="number">2</span>+y**<span class="number">2</span>)), show=<span class="keyword">False</span>, xlabel=<span class="string">'$x$'</span>, ylabel=<span class="string">'$y$'</span>)</span><br><span class="line">p.save(<span class="string">'plot3d.png'</span>)</span><br><span class="line">p.show()</span><br></pre></td></tr></table></figure><p><img src="/posts/SymPy符号制图/plot3d.png"></p><h1 id="隐函数画图">隐函数画图</h1><p>用<code>sumpy.Eq</code>表示一个方程</p><p><code>Eq(expr_a,expr_b)</code>表示等式两边分别是<code>expr_a,expr_b</code></p><p><code>Eq(expr)</code>等价于<code>Eq(expr,0)</code></p><p><span class="math inline">\((x-1)^2+(y-2)^2-4=0\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> rc</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> plot_implicit, Eq</span><br><span class="line"><span class="keyword">from</span> sympy.abc <span class="keyword">import</span> x, y</span><br><span class="line">rc(<span class="string">'font'</span>, size=<span class="number">16</span>)</span><br><span class="line">p = plot_implicit(Eq((x<span class="number">-1</span>)**<span class="number">2</span>+(y<span class="number">-2</span>)**<span class="number">2</span><span class="number">-4</span>), show=<span class="keyword">False</span>,</span><br><span class="line">                  xlabel=<span class="string">'$x$'</span>, ylabel=<span class="string">'$y$'</span>)</span><br><span class="line">p.save(<span class="string">'plot_implicit.png'</span>)</span><br><span class="line">p.show()</span><br></pre></td></tr></table></figure><p><img src="/posts/SymPy符号制图/plot_implicit.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;与Matplotlib不同，SymPy无需离散的数据，仅需符号表达式即可制图&lt;/p&gt;
&lt;h1 id=&quot;二维曲线&quot;&gt;二维曲线&lt;/h1&gt;
&lt;p&gt;单个图像：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;plot(expr, range, **kwargs)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://oi.linkfqy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://oi.linkfqy.top/tags/Python/"/>
    
      <category term="Sympy" scheme="http://oi.linkfqy.top/tags/Sympy/"/>
    
  </entry>
  
  <entry>
    <title>Python使用Matplotlib作图</title>
    <link href="http://oi.linkfqy.top/posts/Python%E4%BD%BF%E7%94%A8Matplotlib%E4%BD%9C%E5%9B%BE/"/>
    <id>http://oi.linkfqy.top/posts/Python使用Matplotlib作图/</id>
    <published>2021-08-01T12:43:30.000Z</published>
    <updated>2021-08-03T01:43:55.801Z</updated>
    
    <content type="html"><![CDATA[<p><code>Matplotlib.pyplot</code>将原本面向对象的作图操作封装成函数，使之更近似于MATLAB的交互式命令</p><p>只要有离散的数据，就可以做出柱状、散点、饼状、折线、3D图形等可视化图表</p><h1 id="柱状图bar">柱状图（bar）</h1><p><code>pyplot.bar()</code>只需提供两个数组作为各数据的横纵坐标，即可生成柱状图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">y = np.array((<span class="number">2100</span>, <span class="number">3000</span>, <span class="number">4000</span>))</span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">width = <span class="number">0.2</span></span><br><span class="line">rc(<span class="string">'font'</span>, size=<span class="number">16</span>)</span><br><span class="line">bar(x, y, width)  <span class="comment"># 指定柱宽</span></span><br><span class="line">ylabel(<span class="string">"消费数据"</span>)</span><br><span class="line">xticks(x, [<span class="string">"用户A"</span>, <span class="string">"用户B"</span>, <span class="string">"用户C"</span>], rotation=<span class="number">20</span>)  <span class="comment"># 将x标签改为用户名，并旋转20度显示</span></span><br><span class="line">rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 设置中文字体，否则会乱码</span></span><br><span class="line">savefig(<span class="string">'bar.png'</span>, dpi=<span class="number">500</span>)</span><br><span class="line">show()  <span class="comment"># 显示在屏幕</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="/posts/Python使用Matplotlib作图/bar.png"></p><p>若要显示负号，需<code>rcParams['axes.unicode_minus']=False</code></p><h1 id="散点图scatter">散点图（scatter）</h1><p>与<code>bar</code>类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.linalg.linalg <span class="keyword">import</span> _eigvalsh_dispatcher</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *  <span class="comment"># pylab=pyplot+部分numpy函数</span></span><br><span class="line">x = array(range(<span class="number">1</span>, <span class="number">8</span>))</span><br><span class="line">y = <span class="string">"27.0  26.5 26.3  26.1    25.7 25.3   24.8"</span></span><br><span class="line">y = <span class="string">","</span>.join(y.split())</span><br><span class="line">y = array(eval(y))</span><br><span class="line">scatter(x, y, marker=<span class="string">'*'</span>)  <span class="comment"># 用星形显示散点</span></span><br><span class="line">savefig(<span class="string">"scatter.png"</span>, dpi=<span class="number">500</span>)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p><img src="/posts/Python使用Matplotlib作图/scatter.png"></p><h1 id="折线图plot">折线图（plot）</h1><p>基本用法为<code>plot(x,y,s)</code>，前两个参数为数据点的横纵坐标，s为指定线条颜色、线条样式和数据点形状的字符串</p><p>也可在同一个坐标内显示多个折线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> *</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">200</span>)</span><br><span class="line">y1 = np.sin(x)</span><br><span class="line">y2 = np.cos(pow(x, <span class="number">2</span>))</span><br><span class="line">rc(<span class="string">'font'</span>, size=<span class="number">16</span>)</span><br><span class="line"><span class="comment"># rc('text', usetex=True) # 可以用LaTeX字体显示</span></span><br><span class="line">plot(x, y1, <span class="string">'r-'</span>, label=<span class="string">'$sin(x)$'</span>, linewidth=<span class="number">2</span>)  <span class="comment"># 红色实线</span></span><br><span class="line">plot(x, y2, <span class="string">'b--'</span>, label=<span class="string">'$cos(x^2)$'</span>)  <span class="comment"># 蓝色虚线</span></span><br><span class="line">xlabel(<span class="string">'$x$'</span>)</span><br><span class="line">ylabel(<span class="string">'$y$'</span>, rotation=<span class="number">0</span>)  <span class="comment"># y标签默认旋转90度</span></span><br><span class="line">rc(<span class="string">'legend'</span>, loc=<span class="string">'lower left'</span>)  <span class="comment"># 图例在左下显示</span></span><br><span class="line">legend()</span><br><span class="line">savefig(<span class="string">'plot.png'</span>, dpi=<span class="number">500</span>)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p><img src="/posts/Python使用Matplotlib作图/plot.png"></p><h1 id="饼状图pie">饼状图（pie）</h1><p>只需一维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> *</span><br><span class="line">a = np.array([<span class="number">124</span>, <span class="number">45</span>, <span class="number">72</span>, <span class="number">87</span>, <span class="number">11</span>])</span><br><span class="line">pie(a, labels=[<span class="string">"A产品"</span>, <span class="string">"B产品"</span>, <span class="string">"C产品"</span>, <span class="string">"D产品"</span>, <span class="string">"E产品"</span>])</span><br><span class="line">title(<span class="string">"销售额分析"</span>)</span><br><span class="line">rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">savefig(<span class="string">"pie.png"</span>, dpi=<span class="number">500</span>)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p><img src="/posts/Python使用Matplotlib作图/pie.png"></p><h1 id="子窗口subplot">子窗口（subplot）</h1><p><code>subplot(nrows, ncols, index)</code></p><p>前两个参数将整个窗口分为<code>nrows*ncols</code>的区域</p><p>函数返回从上到下，从左到右的第<code>index</code>个区域（从1开始）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> *</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">200</span>)</span><br><span class="line">y1 = np.sin(x)</span><br><span class="line">y2 = np.cos(x)</span><br><span class="line">y3 = np.sin(x*x)</span><br><span class="line">rc(<span class="string">'font'</span>, size=<span class="number">16</span>)</span><br><span class="line">ax1 = subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># 创建左上窗口</span></span><br><span class="line">ax1.plot(x, y1, <span class="string">'r'</span>, label=<span class="string">'$sin(x)$'</span>)</span><br><span class="line">legend()</span><br><span class="line"></span><br><span class="line">ax2 = subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)  <span class="comment"># 创建右上窗口</span></span><br><span class="line">ax2.plot(x, y2, <span class="string">'b--'</span>, label=<span class="string">'$cos(x)$'</span>)</span><br><span class="line">legend()</span><br><span class="line"></span><br><span class="line">ax3 = subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 创建下方窗口</span></span><br><span class="line">ax3.plot(x, y3, <span class="string">'k--'</span>, label=<span class="string">'$sin(x^2)$'</span>)</span><br><span class="line">legend()</span><br><span class="line">savefig(<span class="string">'subplot.png'</span>, dpi=<span class="number">500</span>)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p><img src="/posts/Python使用Matplotlib作图/subplot.png"></p><p>上方的两个窗口分别占据了2*2划分的前两个区域</p><p>下方窗口占据了2*1划分的第二个区域</p><h1 id="三维曲线plot3d">三维曲线（plot3D）</h1><p>以下代码画出<span class="math inline">\(x=t\sin t,y=t\cos t,z=t\)</span>的图形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">ax = axes(projection=<span class="string">'3d'</span>)  <span class="comment"># 先设置三维模式</span></span><br><span class="line">z = np.linspace(<span class="number">0</span>, <span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">x = np.sin(z)*z</span><br><span class="line">y = np.cos(z)*z</span><br><span class="line">ax.plot3D(x, y, z, <span class="string">'k'</span>)</span><br><span class="line">savefig(<span class="string">'plot3D.png'</span>, dpi=<span class="number">500</span>)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p><img src="/posts/Python使用Matplotlib作图/plot3D.png"></p><h1 id="三维曲面plot_surfaceplot_wireframe">三维曲面（plot_surface,plot_wireframe）</h1><p><code>plot_surface</code>生成表面图形，<code>plot_wireframe</code>生成网格图形</p><p>生成三维曲面时，需指定网格坐标（描点坐标）</p><p>以下代码画出<span class="math inline">\(z=\sin (\sqrt{x^2+y^2})\)</span>的图形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.linspace(<span class="number">-6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line">y = np.linspace(<span class="number">-6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line">X, Y = np.meshgrid(x, y)  <span class="comment"># 生成网格坐标矩阵</span></span><br><span class="line">Z = np.sin(np.sqrt(X**<span class="number">2</span>+Y**<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">ax1 = subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line">ax1.plot_surface(X, Y, Z, cmap=<span class="string">'viridis'</span>)  <span class="comment"># 使用viridis的配色创建表面图形</span></span><br><span class="line">ax1.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax1.set_zlabel(<span class="string">'z'</span>)</span><br><span class="line"></span><br><span class="line">ax2 = subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line">ax2.plot_wireframe(X, Y, Z, color=<span class="string">'c'</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax2.set_zlabel(<span class="string">'z'</span>)</span><br><span class="line"></span><br><span class="line">savefig(<span class="string">'plot_surface.png'</span>, dpi=<span class="number">500</span>)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p><img src="/posts/Python使用Matplotlib作图/plot_surface.png"></p><h1 id="等高线图contour">等高线图（contour）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">z = np.loadtxt(<span class="string">"data.txt"</span>) <span class="comment"># 从文件导入高程数据</span></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">1500</span>, <span class="number">100</span>)</span><br><span class="line">y = np.arange(<span class="number">1200</span>, <span class="number">-10</span>, <span class="number">-100</span>)</span><br><span class="line">contr = contour(x, y, z)</span><br><span class="line">clabel(contr) <span class="comment"># 标注高度</span></span><br><span class="line">savefig(<span class="string">'contour.png'</span>, dpi=<span class="number">500</span>)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p><img src="/posts/Python使用Matplotlib作图/contour.png"></p><h1 id="向量图quiver">向量图（quiver）</h1><p>以下代码画出向量场<span class="math inline">\(\vec A=(y\cos x,y\sin x)\)</span></p><p><code>quiver(x, y, vx, vy)</code>分别接收两个网格坐标矩阵，以及向量场的xy分量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">11</span>)</span><br><span class="line">y = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line">x, y = np.meshgrid(x, y)</span><br><span class="line">vx = y*np.cos(x)</span><br><span class="line">vy = y*np.sin(x)</span><br><span class="line">quiver(x, y, vx, vy)</span><br><span class="line">savefig(<span class="string">'quiver.png'</span>, dpi=<span class="number">500</span>)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p><img src="/posts/Python使用Matplotlib作图/quiver.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Matplotlib.pyplot&lt;/code&gt;将原本面向对象的作图操作封装成函数，使之更近似于MATLAB的交互式命令&lt;/p&gt;
&lt;p&gt;只要有离散的数据，就可以做出柱状、散点、饼状、折线、3D图形等可视化图表&lt;/p&gt;
&lt;h1 id=&quot;柱状图bar&quot;&gt;柱状图（
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://oi.linkfqy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://oi.linkfqy.top/tags/Python/"/>
    
      <category term="Matplotlib" scheme="http://oi.linkfqy.top/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>LitePal使用指南</title>
    <link href="http://oi.linkfqy.top/posts/LitePal%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://oi.linkfqy.top/posts/LitePal使用指南/</id>
    <published>2021-05-03T09:19:42.000Z</published>
    <updated>2021-05-03T09:19:47.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="litepal使用指南">LitePal使用指南</h1><p>我们项目中只涉及轻量级的数据库操作，因此使用LitePal中封装好的接口可以大大简化操作</p><p><strong>建议全程使用LitePal进行开发</strong></p><p><a href="https://github.com/guolindev/LitePal" target="_blank" rel="noopener">github地址</a></p><h2 id="配置环境">配置环境</h2><p><strong>注意：以下有些步骤是我已经完成的，请务必先将本地工程更新至仓库中的最新版本</strong></p><p>在<code>app/build.gradle</code>中添加对LitePal的引用：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">dependencies</span> &#123;</span><br><span class="line">    <span class="attribute">implementation</span> <span class="string">'org.litepal.guolindev:core:3.2.3'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意使用最新版本3.2.3</p><p>在<code>assets</code>中创建<code>litepal.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"main"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.hitsz.eazytime.model.Todo"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>dbname</code>指定数据库名，<code>version</code>指定数据库版本（增减数据表、增减数据表字段、改变字段类型等操作都必须增加版本号）</p><p>在<code>list</code>中使用<code>mapping</code>标签关联每个数据表</p><p>在<code>AndroidManifest.xml</code>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"org.litepal.LitePalApplication"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建数据表">创建数据表</h2><p>LitePal将数据表和java类一一对应，因此对对象的操作就很容易转化成对数据表的操作</p><p>在<code>com.hitsz.eazytime.model</code>包下新增一个java文件用于定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> <span class="keyword">extends</span> <span class="title">LitePalSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Date startTime;</span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Todo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getStartTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartTime</span><span class="params">(Date startTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startTime = startTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getEndTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> endTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEndTime</span><span class="params">(Date endTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endTime = endTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LitePal支持的数据类型一共有8种：<code>int、short、long、float、double、boolean、String、Date</code></p><p><code>id</code>字段：无论类中定义与否，数据表里都会存在，且作为自增主键使用，但在类中定义<code>id</code>及<code>getId</code>可以方便查询</p><p><strong>代码规范：类中的所有成员必须以private定义，取值和修改必须经过get和set函数</strong></p><p><strong>注意：新版本LitePal的数据表类应当继承自<code>LitePalSupport</code>而非<code>DataSupport</code></strong></p><p><strong>注意：修改了类的定义后，请务必增加数据库的版本号，否则对类的更改无法应用至数据库</strong></p><h2 id="增查删改">增查删改</h2><p>这部分在《第一行代码》和<a href="https://blog.csdn.net/guolin_blog/category_2522725.html" target="_blank" rel="noopener">作者博客</a>里有较详细的介绍，这里有重点地讲一下</p><h3 id="增">增</h3><p>一般new一个新的对象出来，然后save就可以了</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Todo</span> todo=<span class="function"><span class="keyword">new</span> <span class="title">Todo</span>(...);</span></span><br><span class="line"><span class="function"><span class="title">todo</span>.<span class="title">save</span>();</span></span><br></pre></td></tr></table></figure><h3 id="查">查</h3><p><strong>注意：新版的查询使用<code>LitePal</code>而非<code>DataSupport</code></strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;Todo&gt; todos = LitePal.<span class="keyword">select</span>(<span class="params">...</span>).<span class="keyword">where</span>(<span class="params">...</span>).<span class="keyword">order</span>(<span class="params">...</span>).limit(<span class="params">...</span>).offset(<span class="params">...</span>).find(Todo.class)</span><br></pre></td></tr></table></figure><p>以上连缀无固定顺序，也可不写其中的某些连缀</p><p>注：LitePal本身支持关联表的激进查询，但不推荐使用，合理的写法是在类中实现一个返回关联字段的函数，详细请看作者博客</p><h3 id="删">删</h3><p>没什么要说的，见作者博客</p><h3 id="改">改</h3><p>没什么要说的，见作者博客</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;litepal使用指南&quot;&gt;LitePal使用指南&lt;/h1&gt;
&lt;p&gt;我们项目中只涉及轻量级的数据库操作，因此使用LitePal中封装好的接口可以大大简化操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议全程使用LitePal进行开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a
      
    
    </summary>
    
      <category term="Android" scheme="http://oi.linkfqy.top/categories/Android/"/>
    
    
      <category term="数据库" scheme="http://oi.linkfqy.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>简易版git教程</title>
    <link href="http://oi.linkfqy.top/posts/%E7%AE%80%E6%98%93%E7%89%88Git%E6%95%99%E7%A8%8B/"/>
    <id>http://oi.linkfqy.top/posts/简易版Git教程/</id>
    <published>2021-03-30T14:07:25.000Z</published>
    <updated>2021-03-30T14:25:24.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易版git教程">简易版git教程</h1><p>这是写给大一立项小组成员看的简易版git教程</p><p>我们做这个项目只需要一些基本的git命令就可以了，因此这里教大家10min速成git</p><h2 id="准备工作">准备工作</h2><ul><li>GitHub和git的关系</li></ul><p>git是版本管理工具，适合多人合作，储存代码的地方叫做仓库，仓库可以在本地，也可以在学校的服务器上，GitHub是个托管仓库的网站，大家经常把代码放在GitHub上</p><p>在<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">这里</a>下载并安装git，看不懂就一直点next就行</p><p>git是一个命令行工具，要使用它只能敲对应的命令</p><p>下面介绍的命令均在对应目录下的命令行中执行</p><ul><li>如何在当前目录下打开命令行？<ul><li>如图在任务管理器路径前敲CMD即可</li></ul></li></ul><p><img src="/posts/简易版Git教程/1.png"></p><h2 id="git-clone">git clone</h2><p>clone是将网络上的仓库克隆到本地的操作</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">"https</span>://github.com/linkfqy/EazyTime.git<span class="string">"</span></span><br></pre></td></tr></table></figure><p>上面的命令将我们项目的工程文件clone至当前目录</p><p>当前目录会生成一个EazyTime文件夹即工程文件夹，打开它并重新打开命令行，<strong>后续命令均在此文件夹中进行</strong></p><p>clone到本地后，你就可以对工程文件进行编辑了，可以任意增加想要的功能</p><h2 id="git-add">git add</h2><p>一般来说，我们只希望自己工作的那部分文件能够更新到仓库，而无关紧要的修改不应影响他人</p><p>因此需要对工作文件进行add</p><p>add命令将指定的文件或目录添加至<strong>本地</strong>的暂存区，只有add过的文件才能被提交，add过的文件还可以修改，也可以再次add，最终提交的文件以最后一次add的版本为准</p><p>如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> <span class="string">"README.md"</span></span></span><br></pre></td></tr></table></figure><p>以上命令将<code>README.md</code>文件添加至<strong>本地</strong>的暂存区</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> <span class="string">"app\src\main\java"</span></span></span><br></pre></td></tr></table></figure><p>以上命令将<code>app\src\main\java</code>整个文件夹添加至<strong>本地</strong>的暂存区</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> *</span></span><br></pre></td></tr></table></figure><p>以上命令将<strong>所有文件</strong>添加至本地的暂存区</p><p><strong>注意：不要随意使用以上命令！因为这会将你对工程做的所有修改（而非仅属于你的那部分工作）都添加！一旦push，会对所有人共用的仓库产生影响！</strong></p><p>合适的做法是，仅add自己工作所属的目录，如：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add "app<span class="symbol">\s</span>rc<span class="symbol">\m</span>ain<span class="symbol">\j</span>ava<span class="symbol">\c</span>om<span class="symbol">\h</span>itsz<span class="symbol">\e</span>azytime<span class="symbol">\u</span>i<span class="symbol">\t</span>odo"</span><br></pre></td></tr></table></figure><h2 id="git-status">git status</h2><p><code>git status</code>命令用于显示工作目录和暂存区的状态。</p><p>使用此命令能看到哪些<strong>修改</strong>被暂存到了, 哪些没有，哪些<strong>文件</strong>还没被add。<code>git status</code>不显示已经<code>commit</code>到项目历史中去的信息。</p><p>“<em>Changes to be committed</em>”所列的是已add过的文件版本 “<em>Changed but not updated</em>”所列的是add过但被修改，尚未再次add的文件 “<em>Untracked files</em>”中所列的是尚未add的文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Changes to be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git restore --staged &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line">        modified:   README.md</span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git restore &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line">        modified:   README.md</span><br></pre></td></tr></table></figure><p>以上表示<code>README.md</code>被add过一个版本，但之后又修改过，可以再次add以添加新的版本</p><p>同时也提示你：</p><ul><li>想要舍弃已add的版本，使用<code>git restore --staged &quot;README.md&quot;</code>命令</li><li>想要还原对<code>README.md</code>的修改，使用<code>git restore &quot;README.md&quot;</code>将文件变为最后一次add的版本</li></ul><h2 id="git-commit">git commit</h2><p><code>commit</code>命令将暂存区的内容添加到<strong>本地</strong>仓库中</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">"message"</span></span><br></pre></td></tr></table></figure><p>上面的message是对此次提交的注释，可以写点关于这次提交干了啥的解释</p><h2 id="git-push">git push</h2><p>终于到了最后一步，将本地所作的修改提交至GitHub上的仓库</p><p><strong>注意：之前的操作都是本地的，不push大家是看不到你的工作的</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>一句话将本地仓库提交至GitHub</p><p>如果想要提交对应分支，则：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> main</span><br></pre></td></tr></table></figure><p>将本地的main分支提交至GitHub</p><p>第一次push可能会弹出登录窗口，登录github账号就可以正常提交了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简易版git教程&quot;&gt;简易版git教程&lt;/h1&gt;
&lt;p&gt;这是写给大一立项小组成员看的简易版git教程&lt;/p&gt;
&lt;p&gt;我们做这个项目只需要一些基本的git命令就可以了，因此这里教大家10min速成git&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;准备工作&lt;/h2&gt;

      
    
    </summary>
    
      <category term="杂" scheme="http://oi.linkfqy.top/categories/%E6%9D%82/"/>
    
    
      <category term="git" scheme="http://oi.linkfqy.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>EazyTime开发笔记</title>
    <link href="http://oi.linkfqy.top/posts/EazyTime/"/>
    <id>http://oi.linkfqy.top/posts/EazyTime/</id>
    <published>2021-03-29T15:12:08.000Z</published>
    <updated>2021-03-30T14:15:00.600Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    <summary type="html">
    
      
      
        

      
    
    </summary>
    
      <category term="学习笔记" scheme="http://oi.linkfqy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Python学习笔记</title>
    <link href="http://oi.linkfqy.top/posts/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://oi.linkfqy.top/posts/Python学习笔记/</id>
    <published>2021-03-25T15:35:00.000Z</published>
    <updated>2021-03-27T02:33:17.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="section">3.25</h2><p>今天遇到了这样一个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, next=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, L)</span>:</span></span><br><span class="line">        self=ListNode(val=L[<span class="number">0</span>])</span><br><span class="line">        now = self</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> L[<span class="number">1</span>:]:</span><br><span class="line">            now.next = ListNode(val=x)</span><br><span class="line">            now = now.next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></span><br><span class="line">        now = self</span><br><span class="line">        <span class="keyword">while</span> (now != <span class="keyword">None</span>):</span><br><span class="line">            print(<span class="string">'%d '</span> % (now.val))</span><br><span class="line">            now = now.next</span><br><span class="line">        print(<span class="string">'\n'</span>)</span><br><span class="line">        </span><br><span class="line">a=ListNode()</span><br><span class="line">a.set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">a.print() <span class="comment"># 输出0</span></span><br></pre></td></tr></table></figure><p>可见，<code>a.set()</code>并没有改变a的值，不得其解</p><p>看了这篇<a href="https://www.cnblogs.com/pythonista/p/11178705.html" target="_blank" rel="noopener">文章</a></p><p>豁然开朗，之前理解有误的原因是自动把C++的赋值与Python混淆了</p><p>Python的变量，其实是C++意义上的指针</p><p>下面摘录几段：</p><hr><h3 id="构造函数返回指针">构造函数返回指针</h3><p><strong>Python 的构造函数将构造匿名对象，且返回此对象的一个指针。</strong></p><p>这是 Python 与指针的第一个重要联系。</p><p>用代码描述，对于Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sampleNum = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>其不类似于 C++ 代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sampleNum = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>而更类似于：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __tmpNum = <span class="number">0</span>, *sampleNum = &amp;__tmpNum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sampleNum(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h3 id="setitems__操作将隐式解指针">__setitems__操作将隐式解指针</h3><p>Python 与指针的另一个重要联系在于 Python 的<strong>隐式解指针行为。</strong></p><p>虽然 Python 不存在显式解指针操作，但（有且仅有）__setitems__操作将进行隐式解指针，通过此方法对变量进行修改等同于通过解指针操作修改变量原值。</p><p>此种性质意味着：</p><ol type="1"><li>任何不涉及__setitems__的操作都将成为指针重绑定。</li></ol><p>对于Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numList = [<span class="keyword">None</span>] * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebinding</span></span><br><span class="line">numList = [<span class="keyword">None</span>] * <span class="number">5</span></span><br></pre></td></tr></table></figure><p>其相当于：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *numList = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rebinding</span></span><br><span class="line"><span class="keyword">delete</span>[] numList;</span><br><span class="line">numList = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">delete</span>[] numList;</span><br></pre></td></tr></table></figure><p>由此可见，对 numList 的非__setitems__操作，导致 numList 被绑定到了一个新指针上。</p><ol start="2" type="1"><li>任何涉及__setitems__的操作都将成为解指针操作。</li></ol><p>由于 Python 对哈希表的高度依赖，“涉及__setitems__的操作”在 Python 中实际上是一个非常广泛的行为，这主要包括：</p><ul><li>对数组的索引操作</li><li>对哈希表的查找操作</li><li>涉及__setattr__的操作（由于 Python 将 attribute 存储在哈希表中，所以__setattr__操作最终将是某种__setitems__操作）</li></ul><hr><p>于是，将<code>set()</code>改为这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, L)</span>:</span></span><br><span class="line">    self.val = L[<span class="number">0</span>] <span class="comment"># self=ListNode(val=L[0])</span></span><br><span class="line">    self.next = <span class="keyword">None</span></span><br><span class="line">    now = self</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L[<span class="number">1</span>:]:</span><br><span class="line">        now.next = ListNode(val=x)</span><br><span class="line">        now = now.next</span><br></pre></td></tr></table></figure><p>就解决了问题</p><p><strong><code>self</code>是默认将实例本身传入的参数</strong>，根据上文，实际传入的是实例的指针，而<strong><code>self=ListNode(val=L[0])</code>将<code>self</code>重新绑定至一个新建的节点</strong>，那么后续进行的操作就与原实例无关了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;section&quot;&gt;3.25&lt;/h2&gt;
&lt;p&gt;今天遇到了这样一个问题：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://oi.linkfqy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://oi.linkfqy.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【最大权闭合子图】LOJ6045 「雅礼集训 2017 Day8」价</title>
    <link href="http://oi.linkfqy.top/posts/LOJ6045/"/>
    <id>http://oi.linkfqy.top/posts/LOJ6045/</id>
    <published>2018-11-25T11:48:02.000Z</published>
    <updated>2018-11-25T12:09:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/6045" target="_blank" rel="noopener">题面在这里</a></p><p>​</p><p>很明显是最大权闭合子图的模型</p><p>​</p><p>示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cl(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">605</span>,maxe=<span class="number">200005</span>,inf=<span class="number">0x3f3f3f3f</span>,INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">int</span> n,S,T;</span><br><span class="line"><span class="keyword">int</span> tot,son[maxe],nxt[maxe],lnk[maxn];ll flw[maxe],cap[maxe];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">son[++tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;flw[tot]=<span class="number">0</span>;cap[tot]=f;</span><br><span class="line">son[++tot]=x;nxt[tot]=lnk[y];lnk[y]=tot;flw[tot]=<span class="number">0</span>;cap[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> que[maxn],d[maxn],pos[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">cl(d,<span class="number">63</span>);</span><br><span class="line"><span class="keyword">int</span> hed=<span class="number">0</span>,til=<span class="number">1</span>;</span><br><span class="line">que[<span class="number">1</span>]=S;d[S]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (hed!=til)&#123;</span><br><span class="line"><span class="keyword">int</span> x=que[++hed];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (d[son[j]]==inf&amp;&amp;flw[j]&lt;cap[j])</span><br><span class="line">  d[que[++til]=son[j]]=d[x]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[T]!=inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,ll flow)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==T||flow==<span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line">ll f=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;j=pos[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (d[son[j]]==d[x]+<span class="number">1</span>&amp;&amp;(f=dfs(son[j],min(flow,cap[j]-flw[j])))&gt;<span class="number">0</span>)&#123;</span><br><span class="line"> flw[j]+=f;flw[j^<span class="number">1</span>]-=f;</span><br><span class="line"> res+=f,flow-=f;</span><br><span class="line"> <span class="keyword">if</span> (flow==<span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">S=<span class="number">2</span>*n+<span class="number">1</span>,T=S+<span class="number">1</span>;tot=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>,x;j&lt;=t;j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x),add(i,x+n,INF);</span><br><span class="line">add(i+n,T,inf);</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,pi;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pi),add(S,i,-pi+inf),ans-=inf-pi;</span><br><span class="line"><span class="keyword">while</span> (bfs())&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(pos,lnk,<span class="keyword">sizeof</span>(lnk));</span><br><span class="line">ans+=dfs(S,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6045&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;很明显是最大权闭合子图的模型&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;示例程序：&lt;/
      
    
    </summary>
    
      <category term="题解" scheme="http://oi.linkfqy.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="二分图" scheme="http://oi.linkfqy.top/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="最大权闭合子图" scheme="http://oi.linkfqy.top/tags/%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE/"/>
    
      <category term="LOJ" scheme="http://oi.linkfqy.top/tags/LOJ/"/>
    
  </entry>
  
  <entry>
    <title>【莫队+bitset】BZOJ4810 [Ynoi2017]由乃的玉米田</title>
    <link href="http://oi.linkfqy.top/posts/BZOJ4810/"/>
    <id>http://oi.linkfqy.top/posts/BZOJ4810/</id>
    <published>2018-11-22T22:52:00.000Z</published>
    <updated>2018-11-22T23:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4810" target="_blank" rel="noopener">题面在这里</a></p><p>​</p><p>直接莫队……用bitset维护出现过哪些值 <span class="math display">\[a-b=x\Leftrightarrow a=b+x \\a+b=x\Leftrightarrow a=-(b-x)\]</span></p><p>对于操作1，bitset左移x位后对自己取并</p><p>对于操作2，需要同时维护一个所有值的相反数的bitset，同1</p><p>对于操作3，直接爆枚因子即可</p><p>时间复杂度<span class="math inline">\(O(n\sqrt n)\)</span></p><p>​</p><p>示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>],*l=buf,*r=buf;</span><br><span class="line"><span class="keyword">return</span> l==r&amp;&amp;(r=(l=buf)+fread(buf,<span class="number">1</span>,<span class="number">100000</span>,<span class="built_in">stdin</span>),l==r)?EOF:*l++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">red</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=nc();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||<span class="string">'9'</span>&lt;ch) &#123;<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=-f;ch=nc();&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) res=res*<span class="number">10</span>+ch<span class="number">-48</span>,ch=nc();</span><br><span class="line"><span class="keyword">return</span> res*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[maxn],h[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> t,l,r,x,id;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query&amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (h[l]==h[b.l]) <span class="keyword">return</span> r&lt;b.r;</span><br><span class="line"><span class="keyword">return</span> l&lt;b.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blocker</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) h[i]=i/k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn*2&gt; A,B;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!cnt[x]) A[x+<span class="number">100000</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!cnt[x]) B[<span class="number">100000</span>-x]=<span class="number">1</span>;</span><br><span class="line">cnt[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">cnt[x]--;</span><br><span class="line"><span class="keyword">if</span> (!cnt[x]) A[x+<span class="number">100000</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!cnt[x]) B[<span class="number">100000</span>-x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=red(),q=red();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=red();</span><br><span class="line">blocker();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) Q[i].t=red(),Q[i].l=red(),Q[i].r=red(),Q[i].x=red(),Q[i].id=i;</span><br><span class="line">sort(Q+<span class="number">1</span>,Q+<span class="number">1</span>+q);</span><br><span class="line"><span class="keyword">int</span> L=<span class="number">1</span>,R=<span class="number">1</span>; add(a[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="keyword">while</span> (Q[i].l&lt;L) add(a[--L]);</span><br><span class="line"><span class="keyword">while</span> (R&lt;Q[i].r) add(a[++R]);</span><br><span class="line"><span class="keyword">while</span> (L&lt;Q[i].l) dec(a[L++]);</span><br><span class="line"><span class="keyword">while</span> (Q[i].r&lt;R) dec(a[R--]);</span><br><span class="line"><span class="keyword">if</span> (Q[i].t==<span class="number">1</span>)&#123;</span><br><span class="line">ans[Q[i].id]=(A&amp;(A&lt;&lt;Q[i].x)).any();</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (Q[i].t==<span class="number">2</span>)&#123;</span><br><span class="line">ans[Q[i].id]=(A&amp;(B&lt;&lt;Q[i].x)).any();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d=<span class="number">1</span>,td=<span class="built_in">sqrt</span>(Q[i].x);d&lt;=td;d++)</span><br><span class="line"> <span class="keyword">if</span> (Q[i].x%d==<span class="number">0</span>&amp;&amp;cnt[Q[i].x/d]&amp;&amp;cnt[d]) &#123;ans[Q[i].id]=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) <span class="built_in">puts</span>(ans[i]?<span class="string">"yuno"</span>:<span class="string">"yumi"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=4810&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;直接莫队……用bitset维
      
    
    </summary>
    
      <category term="题解" scheme="http://oi.linkfqy.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="BZOJ" scheme="http://oi.linkfqy.top/tags/BZOJ/"/>
    
      <category term="莫队" scheme="http://oi.linkfqy.top/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>【二分图博弈】LOJ6033 「雅礼集训 2017 Day2」棋盘游戏</title>
    <link href="http://oi.linkfqy.top/posts/LOJ6033/"/>
    <id>http://oi.linkfqy.top/posts/LOJ6033/</id>
    <published>2018-11-22T09:37:58.000Z</published>
    <updated>2018-11-22T10:01:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/6033" target="_blank" rel="noopener">题面在这里</a></p><p>​</p><p>显然可以把整个图黑白染色，得到一个二分图</p><p>考虑二分图最大匹配，如果初始点是未匹配点，则Bob只能走未匹配边到一个匹配点，而Alice一定可以沿匹配边走回左边的匹配点，由于不能往回走，此时的情形与初始状态一样，最终Bob输</p><p>如果初始点是匹配点，此时Bob走的是匹配边，Alice走未匹配边，如果最后能走回左边则Alice赢，否则Bob赢。其实他们走的是增广路，Alice能赢当且仅当初始点不一定是匹配点</p><p>所以答案是所有【不一定是匹配点】的点</p><p>具体做法是从左边未匹配点出发，沿增广路遍历到的所有左边点都是答案</p><p>​</p><p>示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cl(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>,maxe=<span class="number">40005</span>,p[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,N,id[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> tot,son[maxe],lnk[maxn],nxt[maxe];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">son[++tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> vis[maxn],times,con[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fnd</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[x]==times) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">vis[x]=times;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])&#123;</span><br><span class="line"><span class="keyword">int</span> k=con[son[j]];con[son[j]]=x;</span><br><span class="line"><span class="keyword">if</span> (!k||fnd(k)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">con[son[j]]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> ans[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (!vis[con[son[j]]]) dfs(con[son[j]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">  <span class="keyword">if</span> (a[i][j]==<span class="string">'.'</span>) id[i][j]=++N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) <span class="keyword">if</span> (a[i][j]==<span class="string">'.'</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;<span class="number">4</span>;t++)&#123;</span><br><span class="line">  <span class="keyword">int</span> ii=i+p[t][<span class="number">0</span>],jj=j+p[t][<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (ii&lt;<span class="number">1</span>||jj&lt;<span class="number">1</span>||ii&gt;n||jj&gt;m||a[ii][jj]==<span class="string">'#'</span>) <span class="keyword">continue</span>;</span><br><span class="line">  add(id[i][j],id[ii][jj]);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">  <span class="keyword">if</span> (a[i][j]==<span class="string">'.'</span>&amp;&amp;((i+j)&amp;<span class="number">1</span>)) times++,num+=fnd(id[i][j]);</span><br><span class="line"><span class="keyword">if</span> (num*<span class="number">2</span>==N) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0"</span>),<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) con[con[i]]=i;</span><br><span class="line"></span><br><span class="line">cl(vis,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">  <span class="keyword">if</span> (a[i][j]==<span class="string">'.'</span>&amp;&amp;!vis[id[i][j]])</span><br><span class="line">  <span class="keyword">if</span> (!con[id[i][j]]) dfs(id[i][j]);</span><br><span class="line"><span class="keyword">int</span> ANS=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">  <span class="keyword">if</span> (vis[id[i][j]]) ANS++,ans[i][j]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ANS);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">  <span class="keyword">if</span> (ans[i][j]) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i,j);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6033&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;显然可以把整个图黑白染色，得到一个二分图&lt;/p&gt;
&lt;p&gt;考虑二分图最大匹配，如
      
    
    </summary>
    
      <category term="题解" scheme="http://oi.linkfqy.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="二分图" scheme="http://oi.linkfqy.top/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="博弈论" scheme="http://oi.linkfqy.top/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
      <category term="LOJ" scheme="http://oi.linkfqy.top/tags/LOJ/"/>
    
  </entry>
  
  <entry>
    <title>LOJ6030 「雅礼集训 2017 Day1」矩阵</title>
    <link href="http://oi.linkfqy.top/posts/LOJ6030/"/>
    <id>http://oi.linkfqy.top/posts/LOJ6030/</id>
    <published>2018-11-16T12:47:02.000Z</published>
    <updated>2018-11-16T12:48:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/6030" target="_blank" rel="noopener">题面在这里</a></p><p>​</p><p>直接乱搞即可</p><p>​</p><p>示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> n,x[maxn],y[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">bool</span> suc=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"> <span class="keyword">if</span> (s[j]==<span class="string">'#'</span>) suc=<span class="number">1</span>,x[i]++,y[j]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!suc) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>),<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans=n*n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=min(ans,n-x[i]+!y[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">if</span> (y[i]!=n) ans++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6030&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;直接乱搞即可&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;示例程序：&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
      <category term="题解" scheme="http://oi.linkfqy.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="http://oi.linkfqy.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="LOJ" scheme="http://oi.linkfqy.top/tags/LOJ/"/>
    
  </entry>
  
  <entry>
    <title>【线段树+势能分析】LOJ6029 「雅礼集训 2017 Day1」市场</title>
    <link href="http://oi.linkfqy.top/posts/LOJ6029/"/>
    <id>http://oi.linkfqy.top/posts/LOJ6029/</id>
    <published>2018-11-16T09:52:29.000Z</published>
    <updated>2018-11-16T10:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/6029" target="_blank" rel="noopener">题面在这里</a></p><p>​</p><p>考虑一个区间除后变化量如果都相同，就转化为区间减了</p><p>维护最大值和最小值即可判断</p><p>复杂度证明：</p><p>考虑两个数<span class="math inline">\(a,b\)</span>，差是<span class="math inline">\(a-b\)</span>，除以<span class="math inline">\(d\)</span>后差是<span class="math inline">\(\frac{a-b}d\)</span></p><p>也就是说两个数被除<span class="math inline">\(\log\)</span>次就相等了</p><p>令一个线段树节点的势能为<span class="math inline">\(\log(Max-Min)\)</span></p><p>操作2就相当于把区间内所有势能不为1的节点势能-1，代价为势能减小总量</p><p>操作1会将<span class="math inline">\(\log\)</span>个节点的势能恢复为<span class="math inline">\(\log(Max-Min)\)</span></p><p>总时间复杂度为整个过程中产生的势能总量<span class="math inline">\(O((n+q\log n)\log a_i)\)</span></p><p>​</p><p>示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>,maxs=<span class="number">400005</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[maxn];</span><br><span class="line">ll mx[maxs],mn[maxs],s[maxs],ad[maxs],len[maxs];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls x&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs x&lt;&lt;1|1</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;s[x]=s[ls]+s[rs];mx[x]=max(mx[ls],mx[rs]);mn[x]=min(mn[ls],mn[rs]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addad</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> w)</span> </span>&#123;mx[x]+=w;mn[x]+=w;ad[x]+=w;s[x]+=len[x]*w;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ad[x]) addad(ls,ad[x]),addad(rs,ad[x]),ad[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">ad[x]=<span class="number">0</span>; len[x]=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span> mx[x]=mn[x]=s[x]=a[l],<span class="keyword">void</span>();</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(ls,l,mid);build(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">istad</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (qr&lt;l||r&lt;ql) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> addad(x,w);</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; pushdown(x);</span><br><span class="line">istad(ls,l,mid,ql,qr,w);istad(rs,mid+<span class="number">1</span>,r,ql,qr,w);</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">istdv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (qr&lt;l||r&lt;ql) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (ql&lt;=l&amp;&amp;r&lt;=qr&amp;&amp;<span class="built_in">floor</span>(<span class="number">1.0</span>*mx[x]/d)-mx[x]==<span class="built_in">floor</span>(<span class="number">1.0</span>*mn[x]/d)-mn[x]) <span class="keyword">return</span> addad(x,<span class="built_in">floor</span>(<span class="number">1.0</span>*mn[x]/d)-mn[x]);</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; pushdown(x);</span><br><span class="line">istdv(ls,l,mid,ql,qr,d);istdv(rs,mid+<span class="number">1</span>,r,ql,qr,d);</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qrymn</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (qr&lt;l||r&lt;ql) <span class="keyword">return</span> <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">if</span> (ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> mn[x];</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; pushdown(x);</span><br><span class="line"><span class="keyword">return</span> min(qrymn(ls,l,mid,ql,qr),qrymn(rs,mid+<span class="number">1</span>,r,ql,qr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qrys</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (qr&lt;l||r&lt;ql) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> s[x];</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; pushdown(x);</span><br><span class="line"><span class="keyword">return</span> qrys(ls,l,mid,ql,qr)+qrys(rs,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span> (q--)&#123;</span><br><span class="line"><span class="keyword">int</span> c;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</span><br><span class="line"><span class="keyword">if</span> (c==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r,w;<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;w);l++,r++;</span><br><span class="line">istad(<span class="number">1</span>,<span class="number">1</span>,n,l,r,w);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (c==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r,w;<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;w);l++,r++;</span><br><span class="line">istdv(<span class="number">1</span>,<span class="number">1</span>,n,l,r,w);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (c==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);l++,r++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,qrymn(<span class="number">1</span>,<span class="number">1</span>,n,l,r));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);l++,r++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,qrys(<span class="number">1</span>,<span class="number">1</span>,n,l,r));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6029&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;考虑一个区间除后变化量如果都相同，就转化为区间减了&lt;/p&gt;
&lt;p&gt;维护最大值和
      
    
    </summary>
    
      <category term="题解" scheme="http://oi.linkfqy.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="复杂度分析" scheme="http://oi.linkfqy.top/tags/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    
      <category term="线段树" scheme="http://oi.linkfqy.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="LOJ" scheme="http://oi.linkfqy.top/tags/LOJ/"/>
    
  </entry>
  
  <entry>
    <title>【施工ing】模板合集</title>
    <link href="http://oi.linkfqy.top/posts/Template/"/>
    <id>http://oi.linkfqy.top/posts/Template/</id>
    <published>2018-11-09T08:54:43.000Z</published>
    <updated>2018-11-09T13:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>考前背板就看这里了</del></p><a id="more"></a><h1 id="数据结构">数据结构</h1><h2 id="传统数据结构">传统数据结构</h2><h3 id="线段树">线段树</h3><h4 id="线段树动态开点线段树合并">线段树动态开点/线段树合并</h4><p><a href="../BZOJ2733">BZOJ2733</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Rot[maxn],len,tre[maxs],ls[maxs],rs[maxs];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;tre[x]=tre[ls[x]]+tre[rs[x]];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> _ls,<span class="keyword">int</span> _rs,<span class="keyword">int</span> _s)</span> </span>&#123;ls[++len]=_ls,rs[len]=_rs,tre[len]=_s;<span class="keyword">return</span> len;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ist</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) x=newnode(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (l==r) &#123;tre[x]++;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k&lt;=mid) ist(ls[x],l,mid,k);</span><br><span class="line"> <span class="keyword">else</span> ist(rs[x],mid+<span class="number">1</span>,r,k);</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;  <span class="comment">//此处为节省空间，直接把合并后的信息储存在x节点了，合并其他信息要小心</span></span><br><span class="line"><span class="keyword">if</span> (!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">ls[x]=merge(ls[x],ls[y]);</span><br><span class="line">rs[x]=merge(rs[x],rs[y]);</span><br><span class="line">tre[x]=tre[x]+tre[y];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可持久化线段树主席树">可持久化线段树/主席树</h4><p><a href="http://poj.org/problem?id=2104" target="_blank" rel="noopener">POJ2104</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Rot[maxn],tre[maxs],s[maxs][<span class="number">2</span>],len;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;tre[x]=tre[s[x][<span class="number">0</span>]]+tre[s[x][<span class="number">1</span>]];&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=++len; tre[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l==r) &#123;s[x][<span class="number">0</span>]=s[x][<span class="number">1</span>]=<span class="number">0</span>;<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">s[x][<span class="number">0</span>]=build(l,mid); s[x][<span class="number">1</span>]=build(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ist</span><span class="params">(<span class="keyword">int</span> fa,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=++len; tre[x]=tre[fa];s[x][<span class="number">0</span>]=s[fa][<span class="number">0</span>];s[x][<span class="number">1</span>]=s[fa][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span> tre[x]++,x;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k&lt;=mid) s[x][<span class="number">0</span>]=ist(s[fa][<span class="number">0</span>],l,mid,k);</span><br><span class="line"> <span class="keyword">else</span> s[x][<span class="number">1</span>]=ist(s[fa][<span class="number">1</span>],mid+<span class="number">1</span>,r,k);</span><br><span class="line"><span class="keyword">return</span> pushup(x),x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qry</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,tem;</span><br><span class="line"><span class="keyword">if</span> ((tem=tre[s[y][<span class="number">0</span>]]-tre[s[x][<span class="number">0</span>]])&gt;=k) <span class="keyword">return</span> qry(s[x][<span class="number">0</span>],s[y][<span class="number">0</span>],l,mid,k);</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">return</span> qry(s[x][<span class="number">1</span>],s[y][<span class="number">1</span>],mid+<span class="number">1</span>,r,k-tem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可并堆">可并堆</h3><p>随机堆太好用了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!a||!b) <span class="keyword">return</span> a+b;</span><br><span class="line"><span class="keyword">if</span> (key[a]&gt;key[b]) swap(a,b);</span><br><span class="line">pushdown(a);</span><br><span class="line"><span class="keyword">if</span> (rand()&amp;<span class="number">1</span>) ls[a]=merge(ls[a],b);<span class="keyword">else</span> rs[a]=merge(rs[a],b);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!a) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">pushdown(a);</span><br><span class="line"><span class="keyword">return</span> merge(ls[a],rs[a]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图相关数据结构">图相关数据结构</h2><h3 id="并查集">并查集</h3><p>路径压缩：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x==fa[x]:x:fa[x]=getfa(fa[x]);&#125;</span><br></pre></td></tr></table></figure><p>按秩合并+撤销：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fa[maxn],rk[maxn],rkk[maxq],X[maxq],Y[maxq],len;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i,rk[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> fa[x]==x?x:getfa(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">x=getfa(x);y=getfa(y);</span><br><span class="line"><span class="keyword">if</span> (x==y) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (rk[x]&lt;rk[y]) swap(x,y);</span><br><span class="line">++len;</span><br><span class="line">X[len]=x;Y[len]=y; rkk[len]=rk[x];</span><br><span class="line">rk[x]=max(rk[x],rk[y]+<span class="number">1</span>); fa[y]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>&#123;</span><br><span class="line">rk[X[len]]=rkk[len]; fa[Y[len]]=Y[len];</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树链剖分">树链剖分</h3><p>板子题：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1036" target="_blank" rel="noopener">BZOJ1036</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> H_son[maxn],siz[maxn],fa[maxn],dep[maxn],in[maxn],out[maxn],top[maxn],times;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getH</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;dep[x]=dep[fa[x]]+<span class="number">1</span>;H_son[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (son[j]!=fa[x])&#123;</span><br><span class="line">fa[son[j]]=x; getH(son[j]); siz[x]+=siz[son[j]];</span><br><span class="line"><span class="keyword">if</span> (!H_son[x]||siz[H_son[x]]&lt;siz[son[j]]) H_son[x]=son[j];</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> lst)</span></span>&#123;</span><br><span class="line">top[x]=lst;in[x]=++times;id[times]=x;</span><br><span class="line"><span class="keyword">if</span> (H_son[x]) dfs(H_son[x],lst);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (son[j]!=fa[x]&amp;&amp;son[j]!=H_son[x]) dfs(son[j],son[j]);</span><br><span class="line">out[x]=times;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[top[x]]&lt;dep[top[y]]) swap(x,y);</span><br><span class="line">ist(<span class="number">1</span>,<span class="number">1</span>,N,in[top[x]],in[x],w); x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (in[x]&gt;in[y]) swap(x,y);</span><br><span class="line">    ist(<span class="number">1</span>,<span class="number">1</span>,N,in[x],in[y],w);</span><br><span class="line"><span class="comment">//ist(1,1,N,in[x]+1,in[y],w);  维护边权</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[top[x]]&lt;dep[top[y]]) swap(x,y);</span><br><span class="line">res=max(res,qry(<span class="number">1</span>,<span class="number">1</span>,N,in[top[x]],in[x])); x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (in[x]&gt;in[y]) swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> max(res,qry(<span class="number">1</span>,<span class="number">1</span>,N,in[x],in[y]));</span><br><span class="line"><span class="comment">//return max(res,qry(1,1,N,in[x]+1,in[y]));  维护边权</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lct">LCT</h3><p>板子题：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2631" target="_blank" rel="noopener">BZOJ2631</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> s[maxn][<span class="number">2</span>],fa[maxn];</span><br><span class="line"><span class="keyword">bool</span> flp[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isroot(x) (s[fa[x]][0]!=x&amp;&amp;s[fa[x]][1]!=x)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addflip</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;swap(s[x][<span class="number">0</span>],s[x][<span class="number">1</span>]);flp[x]^=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/* do something */</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">if</span> (flp[x]) flp[x]^=<span class="number">1</span>,addflip(s[x][<span class="number">0</span>]),addflip(s[x][<span class="number">1</span>]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=fa[x],g=fa[f],d=s[f][<span class="number">0</span>]==x;</span><br><span class="line"><span class="keyword">if</span> (!isroot(f)) s[g][s[g][<span class="number">1</span>]==f]=x; fa[x]=g;</span><br><span class="line">s[f][d^<span class="number">1</span>]=s[x][d]; fa[s[x][d]]=f; pushup(f);</span><br><span class="line"> s[x][d]=f; fa[f]=x; pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> top,stk[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">stk[top=<span class="number">1</span>]=x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=x;!isroot(i);i=fa[i]) stk[++top]=fa[i];</span><br><span class="line"><span class="keyword">while</span> (top) pushdown(stk[top--]);</span><br><span class="line"><span class="keyword">while</span> (!isroot(x))&#123;</span><br><span class="line"><span class="keyword">int</span> f=fa[x],g=fa[f],d=s[f][<span class="number">0</span>]==x,dd=s[g][<span class="number">0</span>]==f;</span><br><span class="line"><span class="keyword">if</span> (!isroot(f))</span><br><span class="line"> <span class="keyword">if</span> (d==dd) rotate(f),rotate(x);<span class="keyword">else</span></span><br><span class="line">  rotate(x),rotate(x);</span><br><span class="line"><span class="keyword">else</span> rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;x;t=x,x=fa[x]) splay(x),s[x][<span class="number">1</span>]=t,pushup(x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mr</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;access(x),splay(x),addflip(x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;mr(x);fa[x]=y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;mr(x),access(y),splay(y);<span class="keyword">if</span> (s[y][<span class="number">0</span>]==x) fa[x]=s[y][<span class="number">0</span>]=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;access(x),splay(x);<span class="keyword">while</span> (s[x][<span class="number">0</span>]) pushdown(x),x=s[x][<span class="number">0</span>];splay(x);<span class="keyword">return</span> x;&#125;  <span class="comment">//!!!</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span> (getrt(x)!=getrt(y)) join(x,y); <span class="comment">//加边 </span></span><br><span class="line">cut(x,y); <span class="comment">//删边</span></span><br><span class="line">mr(x);access(x); <span class="comment">//修改x的点权</span></span><br><span class="line">mr(x);access(y);splay(x); <span class="comment">//获取(x,y)路径的信息</span></span><br></pre></td></tr></table></figure><h1 id="图论">图论</h1><h2 id="最短路">最短路</h2><h3 id="spfa">SPFA</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dst[maxn],que[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">cl(dst,<span class="number">63</span>);cl(vis,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> hed=<span class="number">0</span>,til=<span class="number">1</span>;</span><br><span class="line">que[<span class="number">1</span>]=<span class="number">1</span>;dst[<span class="number">1</span>]=<span class="number">0</span>;vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (hed!=til)&#123;</span><br><span class="line"><span class="keyword">int</span> x=que[hed=(hed+<span class="number">1</span>)%maxn];</span><br><span class="line">vis[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (dst[son[j]]&gt;dst[x]+w[j])&#123;</span><br><span class="line"> dst[son[j]]=dst[x]+w[j];</span><br><span class="line"> <span class="keyword">if</span> (!vis[son[j]])</span><br><span class="line">  vis[que[til=(til+<span class="number">1</span>)%maxn]=son[j]]=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dijkstra">Dijkstra</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ll dst[maxn]; <span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span></span><br><span class="line">ll d;<span class="keyword">int</span> id;</span><br><span class="line">data () &#123;&#125;</span><br><span class="line">data (<span class="keyword">int</span> _id,ll _d):id(_id),d(_d) &#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> data&amp;b)<span class="keyword">const</span> &#123;<span class="keyword">return</span> d&gt;b.d;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;data&gt; H;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DIJ</span><span class="params">()</span></span>&#123;</span><br><span class="line">cl(dst,<span class="number">63</span>);</span><br><span class="line">dst[<span class="number">1</span>]=<span class="number">0</span>;H.push(data(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span> (!H.empty())&#123;</span><br><span class="line">data k=H.top();H.pop(); <span class="keyword">if</span> (vis[k.id]) <span class="keyword">continue</span>;</span><br><span class="line">vis[k.id]=<span class="number">1</span>;<span class="keyword">if</span> (k.id==n) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[k.id];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (!vis[son[j]]&amp;&amp;dst[son[j]]&gt;dst[k.id]+w[j])</span><br><span class="line">  dst[son[j]]=dst[k.id]+w[j],H.push(data(son[j],dst[son[j]]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络流">网络流</h2><h3 id="最大流">最大流</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1066" target="_blank" rel="noopener">BZOJ1066</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tot,son[maxe],nxt[maxe],pos[maxn],lnk[maxn],flw[maxe],cap[maxe];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">son[++tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;flw[tot]=<span class="number">0</span>;cap[tot]=z;</span><br><span class="line">son[++tot]=x;nxt[tot]=lnk[y];lnk[y]=tot;flw[tot]=<span class="number">0</span>;cap[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[maxn],que[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">cl(d,<span class="number">63</span>);</span><br><span class="line"><span class="keyword">int</span> hed=<span class="number">0</span>,til=<span class="number">1</span>;</span><br><span class="line">d[S]=<span class="number">0</span>;que[<span class="number">1</span>]=S;</span><br><span class="line"><span class="keyword">while</span> (hed!=til)&#123;</span><br><span class="line"><span class="keyword">int</span> x=que[++hed];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (d[son[j]]==INF&amp;&amp;flw[j]&lt;cap[j])</span><br><span class="line">  que[++til]=son[j],d[son[j]]=d[x]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[T]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==T||flow==<span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line">ll res=<span class="number">0</span>,f;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;j=pos[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (d[son[j]]==d[x]+<span class="number">1</span>&amp;&amp;(f=dfs(son[j],min(flow,cap[j]-flw[j])))&gt;<span class="number">0</span>)&#123;</span><br><span class="line"> flw[j]+=f; flw[j^<span class="number">1</span>]-=f;</span><br><span class="line"> res+=f; flow-=f;</span><br><span class="line"><span class="keyword">if</span> (flow==<span class="number">0</span>) <span class="keyword">break</span>;  <span class="comment">//!!!!!!!</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line">tot=<span class="number">1</span>; add();</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (bfs())&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(pos,lnk,<span class="keyword">sizeof</span>(lnk));</span><br><span class="line">ans+=dfs(S,INF);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小费用最大流">最小费用最大流</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tot,son[maxe],nxt[maxe],lnk[maxn],flw[maxe],cap[maxe],w[maxe];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> f,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">son[++tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;flw[tot]=<span class="number">0</span>;cap[tot]=f;w[tot]=z;</span><br><span class="line">son[++tot]=x;nxt[tot]=lnk[y];lnk[y]=tot;flw[tot]=<span class="number">0</span>;cap[tot]=<span class="number">0</span>;w[tot]=-z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> que[maxn],dst[maxn],ed[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">cl(vis,<span class="number">0</span>);cl(dst,<span class="number">63</span>);</span><br><span class="line"><span class="keyword">int</span> hed=<span class="number">0</span>,til=<span class="number">1</span>;que[<span class="number">1</span>]=S;dst[S]=<span class="number">0</span>;fa[S]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (hed!=til)&#123;</span><br><span class="line"><span class="keyword">int</span> x=que[hed=(hed+<span class="number">1</span>)%maxn];</span><br><span class="line">vis[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (flw[j]&lt;cap[j]&amp;&amp;dst[son[j]]&gt;dst[x]+w[j])&#123;</span><br><span class="line"> dst[son[j]]=dst[x]+w[j];</span><br><span class="line"> fa[son[j]]=x; ed[son[j]]=j;</span><br><span class="line"> <span class="keyword">if</span> (!vis[son[j]]) vis[que[til=(til+<span class="number">1</span>)%maxn]=son[j]]=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dst[T]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">tot=<span class="number">1</span>;  <span class="comment">//!!!</span></span><br><span class="line"><span class="comment">//addedge......</span></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (spfa()&amp;&amp;dst[T]&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> Min=INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=T;x!=S;x=fa[x]) Min=min(Min,cap[ed[x]]-flw[ed[x]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=T;x!=S;x=fa[x]) flw[ed[x]]+=Min,flw[ed[x]^<span class="number">1</span>]-=Min;</span><br><span class="line">ans+=Min*dst[T];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分图">二分图</h2><h3 id="二分图最大匹配">二分图最大匹配</h3><p>Hungary算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> times,vis[maxn],con[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[x]==times) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">vis[x]=times;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])&#123;</span><br><span class="line"><span class="keyword">int</span> k=con[son[j]];con[son[j]]=x;</span><br><span class="line"><span class="keyword">if</span> (!k||find(k)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">con[son[j]]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line"> times++,ans+=find(i);</span><br></pre></td></tr></table></figure><h2 id="强连通分量">强连通分量</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1269" target="_blank" rel="noopener">HDU1269</a></p><p>Tarjan</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],stk[maxn],SCC[maxn],times;</span><br><span class="line"><span class="keyword">bool</span> instk[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++times;instk[stk[++stk[<span class="number">0</span>]]=x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (!dfn[son[j]])</span><br><span class="line">  Tarjan(son[j]),low[x]=min(low[x],low[son[j]]);</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (instk[son[j]]) low[x]=min(low[x],dfn[son[j]]);</span><br><span class="line"><span class="keyword">if</span> (dfn[x]==low[x])&#123;</span><br><span class="line">SCC[<span class="number">0</span>]++;</span><br><span class="line"><span class="keyword">while</span> (stk[stk[<span class="number">0</span>]]!=x) instk[stk[stk[<span class="number">0</span>]]]=<span class="number">0</span>,SCC[stk[stk[<span class="number">0</span>]--]]=SCC[<span class="number">0</span>];</span><br><span class="line">instk[stk[stk[<span class="number">0</span>]]]=<span class="number">0</span>,SCC[stk[stk[<span class="number">0</span>]--]]=SCC[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双联通分量">双联通分量</h2><p><a href="../BCC_and_Tarjan">直接看这个</a></p><h2 id="差分约束系统">差分约束系统</h2><p><a href="../System_of_Difference_Constraints">直接看这个</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2330" target="_blank" rel="noopener">BZOJ2330</a></p><h2 id="虚树">虚树</h2><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2286" target="_blank" rel="noopener">BZOJ2286</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!top) &#123;stk[++top]=x;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> lca=LCA(x,stk[top]);</span><br><span class="line"><span class="keyword">while</span> (top&gt;<span class="number">1</span>&amp;&amp;dfn[stk[top<span class="number">-1</span>]]&gt;dfn[lca])</span><br><span class="line">add(stk[top<span class="number">-1</span>],stk[top],dst(stk[top<span class="number">-1</span>],stk[top])),top--;</span><br><span class="line"><span class="keyword">if</span> (dfn[stk[top]]&gt;dfn[lca]) add(lca,stk[top],dst(lca,stk[top])),top--;</span><br><span class="line"><span class="keyword">if</span> (!top||dfn[stk[top]]&lt;dfn[lca]) stk[++top]=lca;</span><br><span class="line">stk[++top]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">sort(h+<span class="number">1</span>,h+<span class="number">1</span>+K,cmp); tot=top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++) insert(h[i]);</span><br><span class="line"><span class="keyword">while</span> (top&gt;<span class="number">1</span>) add(stk[top<span class="number">-1</span>],stk[top],dst(stk[top<span class="number">-1</span>],stk[top])),top--;</span><br></pre></td></tr></table></figure><h2 id="dsu-on-tree">dsu on tree</h2><p><a href="http://codeforces.com/contest/600/problem/E" target="_blank" rel="noopener">Codeforces 600E</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">记录x的贡献</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (!xH[son[j]]) change(son[j],w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dsu</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">bool</span> keep)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> 每个轻儿子 dsu(son,<span class="number">0</span>);</span><br><span class="line">dsu(H_son[x],<span class="number">1</span>); xH[H_son[x]]=<span class="number">1</span>;</span><br><span class="line">change(x,<span class="number">1</span>); xH[H_son[x]]=<span class="number">0</span>;</span><br><span class="line">    更新x的答案</span><br><span class="line"><span class="keyword">if</span> (!keep) change(x,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串相关">字符串相关</h1><h2 id="kmp">KMP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nxt[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;B[j+<span class="number">1</span>]!=B[i]) j=nxt[j];</span><br><span class="line">    <span class="keyword">if</span> (B[j+<span class="number">1</span>]==B[i]) j++;</span><br><span class="line">    nxt[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;B[j+<span class="number">1</span>]!=A[i]) j=nxt[j];</span><br><span class="line">    <span class="keyword">if</span> (B[j+<span class="number">1</span>]==A[i]) j++;</span><br><span class="line">    <span class="keyword">if</span> (j==m)&#123;</span><br><span class="line">        <span class="comment">//do something……</span></span><br><span class="line">        j=nxt[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后缀数组">后缀数组</h2><p>板子题：<a href="http://uoj.ac/problem/35" target="_blank" rel="noopener">UOJ#35</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m,buc[maxn],sa[maxn],rk[maxn*<span class="number">2</span>],t[maxn],ht[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">()</span></span>&#123;</span><br><span class="line">cl(buc,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) buc[rk[t[i]]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) buc[i]+=buc[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) sa[buc[rk[t[i]]]--]=t[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_sa</span><span class="params">()</span></span>&#123;</span><br><span class="line">m=<span class="number">128</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) rk[i]=s[i],t[i]=i;</span><br><span class="line">get_sa();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>,p=<span class="number">0</span>;k&lt;n&amp;&amp;p&lt;n;k&lt;&lt;=<span class="number">1</span>,m=p)&#123;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;i++) t[++p]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span> (sa[i]&gt;k) t[++p]=sa[i]-k;</span><br><span class="line">get_sa(); t[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">if</span> (rk[sa[i]]==rk[sa[i<span class="number">-1</span>]]&amp;&amp;rk[sa[i]+k]==rk[sa[i<span class="number">-1</span>]+k]) t[sa[i]]=p;<span class="keyword">else</span> t[sa[i]]=++p;</span><br><span class="line"><span class="built_in">memcpy</span>(rk,t,<span class="keyword">sizeof</span>(t));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,h=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (h) h--;</span><br><span class="line"><span class="keyword">int</span> j=sa[rk[i]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span> (s[i+h]==s[j+h]) h++;</span><br><span class="line">ht[rk[i]]=h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数学相关">数学相关</h1><h2 id="fft">FFT</h2><p>板子题：<a href="http://uoj.ac/problem/34" target="_blank" rel="noopener">UOJ#34</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">comp</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> r,i;</span><br><span class="line">comp (<span class="keyword">double</span> _r=<span class="number">0</span>,<span class="keyword">double</span> _i=<span class="number">0</span>):r(_r),i(_i) &#123;&#125;</span><br><span class="line">comp <span class="keyword">operator</span>+(<span class="keyword">const</span> comp&amp;b) &#123;<span class="keyword">return</span> comp(r+b.r,i+b.i);&#125;</span><br><span class="line">comp <span class="keyword">operator</span>-(<span class="keyword">const</span> comp&amp;b) &#123;<span class="keyword">return</span> comp(r-b.r,i-b.i);&#125;</span><br><span class="line">comp <span class="keyword">operator</span>*(<span class="keyword">const</span> comp&amp;b) &#123;<span class="keyword">return</span> comp(r*b.r-i*b.i,r*b.i+i*b.r);&#125;</span><br><span class="line">comp <span class="keyword">operator</span>/(<span class="keyword">const</span> <span class="keyword">double</span>&amp;b) &#123;<span class="keyword">return</span> comp(r/b,r/b);&#125;</span><br><span class="line">&#125;a[maxn],b[maxn],c[maxn];</span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_rev</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">rev[<span class="number">0</span>]=<span class="number">0</span>; <span class="keyword">int</span> l=log2(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(comp *a,<span class="keyword">int</span> n,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span> (rev[i]&lt;i) swap(a[i],a[rev[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">2</span>;l&lt;=n;l&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">comp wl(cos(2*PI/l),d*sin(2*PI/l));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k+=l)&#123;</span><br><span class="line">comp w(1,0),_t,_T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>,tj=l&gt;&gt;<span class="number">1</span>;j&lt;tj;j++,w=w*wl)</span><br><span class="line"> <span class="keyword">_t</span>=a[k+j],_T=w*a[k+j+tj],a[k+j]=<span class="keyword">_t</span>+_T,a[k+j+tj]=<span class="keyword">_t</span>-_T;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (d&lt;<span class="number">0</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=a[i]/n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他">其他</h1><h2 id="莫队算法">莫队算法</h2><p><a href="https://lydsy.com/JudgeOnline/problem.php?id=2038" target="_blank" rel="noopener">BZOJ2038</a></p><p>莫队一定要先移R指针！不然有可能会出现L&gt;R，询问函数写得不好就炸了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">blocker</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) h[i]=(i<span class="number">-1</span>)/k+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> data&amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (h[l]==h[b.l]) <span class="keyword">return</span> r&lt;b.r;</span><br><span class="line"><span class="keyword">return</span> l&lt;b.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">blocker();</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+q);</span><br><span class="line"><span class="keyword">int</span> L=<span class="number">1</span>,R=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="keyword">while</span> (R&lt;a[i].r) insert(++R);</span><br><span class="line"><span class="keyword">while</span> (R&gt;a[i].r) del(R--);</span><br><span class="line"><span class="keyword">while</span> (L&gt;a[i].l) insert(--L)</span><br><span class="line"><span class="keyword">while</span> (L&lt;a[i].l) del(L++);</span><br><span class="line">ans[a[i].id]=now;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;考前背板就看这里了&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="实用" scheme="http://oi.linkfqy.top/categories/%E5%AE%9E%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>【启发式分裂】BZOJ4059 [Cerc2012]Non-boring sequences</title>
    <link href="http://oi.linkfqy.top/posts/BZOJ4059/"/>
    <id>http://oi.linkfqy.top/posts/BZOJ4059/</id>
    <published>2018-11-07T10:50:02.000Z</published>
    <updated>2018-11-07T10:52:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://lydsy.com/JudgeOnline/problem.php?id=4059" target="_blank" rel="noopener">题面在这里</a></p><p>​</p><p>启发式分裂裸题</p><p>​</p><p>示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">int</span> tst,n,m,a[maxn],b[maxn],L[maxn],R[maxn],lst[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l&gt;=r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l,j=r;i&lt;=j;i++,j--)&#123;</span><br><span class="line"><span class="keyword">if</span> (L[i]&lt;l&amp;&amp;r&lt;R[i]) <span class="keyword">return</span> solve(l,i<span class="number">-1</span>)&amp;&amp;solve(i+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">if</span> (L[j]&lt;l&amp;&amp;r&lt;R[j]) <span class="keyword">return</span> solve(l,j<span class="number">-1</span>)&amp;&amp;solve(j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tst);</span><br><span class="line"><span class="keyword">while</span> (tst--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),b[i]=a[i];</span><br><span class="line">sort(b+<span class="number">1</span>,b+<span class="number">1</span>+n); m=unique(b+<span class="number">1</span>,b+<span class="number">1</span>+n)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+m,a[i])-b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) lst[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) L[i]=lst[a[i]],lst[a[i]]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) lst[i]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--) R[i]=lst[a[i]],lst[a[i]]=i;</span><br><span class="line"><span class="keyword">if</span> (solve(<span class="number">1</span>,n)) <span class="built_in">puts</span>(<span class="string">"non-boring"</span>);<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"boring"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=4059&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;启发式分裂裸题&lt;/p&gt;
&lt;p&gt;​&lt;
      
    
    </summary>
    
      <category term="题解" scheme="http://oi.linkfqy.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="BZOJ" scheme="http://oi.linkfqy.top/tags/BZOJ/"/>
    
      <category term="启发式分裂" scheme="http://oi.linkfqy.top/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%88%86%E8%A3%82/"/>
    
  </entry>
  
  <entry>
    <title>【启发式分裂】BZOJ5200 [NWERC2017]Factor-Free Tree</title>
    <link href="http://oi.linkfqy.top/posts/BZOJ5200/"/>
    <id>http://oi.linkfqy.top/posts/BZOJ5200/</id>
    <published>2018-11-07T07:10:59.000Z</published>
    <updated>2018-11-07T07:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://lydsy.com/JudgeOnline/problem.php?id=5200" target="_blank" rel="noopener">题面在这里</a></p><p>​</p><p>考虑一个子树（序列），<span class="math inline">\(i\)</span>能作为根当且仅当区间内所有数与<span class="math inline">\(a_i\)</span>互质</p><p>可以预处理出左边第一个与<span class="math inline">\(a_i\)</span>不互质的位置<span class="math inline">\(L_i\)</span>和右边第一个与<span class="math inline">\(a_i\)</span>不互质的位置<span class="math inline">\(R_i\)</span></p><p>具体方法：枚举每个数的质因子，取所有质因子出现位置最大的</p><p>还有一个结论：对于任意区间，更靠两端的点满足与整个区间互质却不能作为根，则里面的点一定也不能</p><p>然后就可以启发式分裂找每个子树的根啦</p><p>启发式分裂：由于指针移动次数为分裂出较小的那个区间长度，可以看作时启发式合并的逆过程</p><p>​</p><p>示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>],*l=buf,*r=buf;</span><br><span class="line"><span class="keyword">return</span> l==r&amp;&amp;(r=(l=buf)+fread(buf,<span class="number">1</span>,<span class="number">100000</span>,<span class="built_in">stdin</span>),l==r)?EOF:*l++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">red</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=nc();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||<span class="string">'9'</span>&lt;ch) &#123;<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=-f;ch=nc();&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) res=res*<span class="number">10</span>+ch<span class="number">-48</span>,ch=nc();</span><br><span class="line"><span class="keyword">return</span> res*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> stk[<span class="number">11</span>];stk[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> stk[++stk[<span class="number">0</span>]]=x%<span class="number">10</span>,x/=<span class="number">10</span>; <span class="keyword">while</span> (x);</span><br><span class="line"><span class="keyword">while</span> (stk[<span class="number">0</span>]) <span class="built_in">putchar</span>(stk[stk[<span class="number">0</span>]--]+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>,maxa=<span class="number">10000005</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn],L[maxn],R[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="keyword">return</span> y==<span class="number">0</span>?x:gcd(y,x%y);&#125;</span><br><span class="line"><span class="keyword">int</span> p[maxa],pre[maxa],lst[maxa];</span><br><span class="line"><span class="keyword">bool</span> vis[maxa];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makep</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!vis[i]) p[++p[<span class="number">0</span>]]=i,pre[i]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p[<span class="number">0</span>]&amp;&amp;i*p[j]&lt;=n;j++)&#123;</span><br><span class="line">vis[i*p[j]]=<span class="number">1</span>; pre[i*p[j]]=p[j];</span><br><span class="line"><span class="keyword">if</span> (i%p[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l,j=r;i&lt;=j;i++,j--)&#123;</span><br><span class="line"><span class="keyword">if</span> (L[i]&lt;l&amp;&amp;r&lt;R[i])&#123;</span><br><span class="line">fa[i]=f;<span class="keyword">return</span> solve(l,i<span class="number">-1</span>,i)&amp;&amp;solve(i+<span class="number">1</span>,r,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (L[j]&lt;l&amp;&amp;r&lt;R[j])&#123;</span><br><span class="line">fa[j]=f;<span class="keyword">return</span> solve(l,j<span class="number">-1</span>,j)&amp;&amp;solve(j+<span class="number">1</span>,r,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=red();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=red();</span><br><span class="line">makep(<span class="number">10000000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=a[i];</span><br><span class="line"><span class="keyword">while</span> (x!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> p=pre[x];</span><br><span class="line">L[i]=max(L[i],lst[p]);</span><br><span class="line">lst[p]=i;</span><br><span class="line"><span class="keyword">while</span> (x%p==<span class="number">0</span>) x/=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p[<span class="number">0</span>];i++) lst[p[i]]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--)&#123;</span><br><span class="line"><span class="keyword">int</span> x=a[i];R[i]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> p=pre[x];</span><br><span class="line">R[i]=min(R[i],lst[p]);</span><br><span class="line">lst[p]=i;</span><br><span class="line"><span class="keyword">while</span> (x%p==<span class="number">0</span>) x/=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (solve(<span class="number">1</span>,n,<span class="number">0</span>))</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) put(fa[i]),<span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"impossible"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=5200&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;考虑一个子树（序列），&lt;span c
      
    
    </summary>
    
      <category term="题解" scheme="http://oi.linkfqy.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="BZOJ" scheme="http://oi.linkfqy.top/tags/BZOJ/"/>
    
      <category term="启发式分裂" scheme="http://oi.linkfqy.top/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%88%86%E8%A3%82/"/>
    
  </entry>
  
  <entry>
    <title>NOIP2017 宝藏</title>
    <link href="http://oi.linkfqy.top/posts/NOIP2017_D2T2/"/>
    <id>http://oi.linkfqy.top/posts/NOIP2017_D2T2/</id>
    <published>2018-11-07T00:07:23.000Z</published>
    <updated>2018-11-07T00:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../../documents/NOIP2017_day2.pdf">题面自取</a></p><p>​</p><p>一看就是状压DP，但是如何保存深度信息？每个点存深度显然不现实</p><p>考虑一个点的深度信息只在加新点时有用，所以强行定义当前所有点的深度即可</p><p><span class="math inline">\(f_{i,s}\)</span>表示当前所有点深度为<span class="math inline">\(i\)</span>，连通块集合为<span class="math inline">\(s\)</span></p><p>显然枚举<span class="math inline">\(s\)</span>补集的子集<span class="math inline">\(ss\)</span>，则有 <span class="math display">\[f_{i+1,s+ss}\leftarrow f_{i,s}+g_{ss}\]</span> 其中<span class="math inline">\(g_{ss}\)</span>表示<span class="math inline">\(ss\)</span>集合中所有点到<span class="math inline">\(s\)</span>代价之和，可以预处理出来</p><p>​</p><p>示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cl(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">15</span>,maxe=<span class="number">2005</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,e,f[maxn][<span class="number">4100</span>],d[maxn][maxn],g[<span class="number">4100</span>],w[maxn],lg[<span class="number">4100</span>],stk[<span class="number">4100</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> up(x,y) (x=min(x,y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;e);</span><br><span class="line">cl(d,<span class="number">63</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;=e;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z),x--,y--,up(d[x][y],z),up(d[y][x],z);</span><br><span class="line">cl(f,<span class="number">63</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) f[<span class="number">1</span>][<span class="number">1</span>&lt;&lt;i]=<span class="number">0</span>,lg[<span class="number">1</span>&lt;&lt;i]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;n);s++)&#123;</span><br><span class="line"> cl(w,<span class="number">63</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k=s;k;k-=k&amp;-k)</span><br><span class="line">   <span class="keyword">if</span> (d[j][lg[k&amp;-k]]!=INF) up(w[j],d[j][lg[k&amp;-k]]*i);</span><br><span class="line"> <span class="keyword">int</span> t=s^((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>);</span><br><span class="line"> cl(g,<span class="number">0</span>); stk[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> ss=t;ss;ss=(ss<span class="number">-1</span>)&amp;t) stk[++stk[<span class="number">0</span>]]=ss;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j=stk[<span class="number">0</span>];j;j--)&#123;</span><br><span class="line">g[stk[j]]=g[stk[j]^lowbit(stk[j])]+w[lg[lowbit(stk[j])]];</span><br><span class="line"><span class="keyword">if</span> (g[stk[j]]&gt;INF) g[stk[j]]=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ss=t;ss;ss=(ss<span class="number">-1</span>)&amp;t)&#123;</span><br><span class="line">up(f[i+<span class="number">1</span>][s|ss],f[i][s]+g[ss]);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">int</span> ans=INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) up(ans,f[i][(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../../documents/NOIP2017_day2.pdf&quot;&gt;题面自取&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;一看就是状压DP，但是如何保存深度信息？每个点存深度显然不现实&lt;/p&gt;
&lt;p&gt;考虑一个点的深度信息只在加新点时有用，所以强行定义当
      
    
    </summary>
    
      <category term="题解" scheme="http://oi.linkfqy.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="状压DP" scheme="http://oi.linkfqy.top/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 700B Connecting Universities</title>
    <link href="http://oi.linkfqy.top/posts/CF700B/"/>
    <id>http://oi.linkfqy.top/posts/CF700B/</id>
    <published>2018-11-06T09:01:23.000Z</published>
    <updated>2018-11-06T09:02:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/problemset/problem/700/B" target="_blank" rel="noopener">题面在这里</a></p><p>​</p><p>对于每条边<span class="math inline">\((u,v)\)</span>，对答案的贡献是两边特殊点少的那个</p><p>​</p><p>示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>,maxe=<span class="number">400005</span>;</span><br><span class="line"><span class="keyword">int</span> n,K,s[maxn]; ll ans;</span><br><span class="line"><span class="keyword">int</span> son[maxe],nxt[maxe],lnk[maxn],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">son[++tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"> <span class="keyword">if</span> (son[j]!=fa) dfs(son[j],x),s[x]+=s[son[j]],ans+=min(s[son[j]],<span class="number">2</span>*K-s[son[j]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;K);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=<span class="number">2</span>*K;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x),s[x]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y),add(x,y),add(y,x);</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/700/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;对于每条边&lt;span class=&quot;mat
      
    
    </summary>
    
      <category term="题解" scheme="http://oi.linkfqy.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Codeforces" scheme="http://oi.linkfqy.top/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 999F Cards and Joy</title>
    <link href="http://oi.linkfqy.top/posts/CF999F/"/>
    <id>http://oi.linkfqy.top/posts/CF999F/</id>
    <published>2018-11-05T23:48:04.000Z</published>
    <updated>2018-11-05T23:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/problemset/problem/999/F" target="_blank" rel="noopener">题面在这里</a></p><p>​</p><p><span class="math inline">\(f_{i,j}\)</span>表示<span class="math inline">\(i\)</span>张卡片，分给<span class="math inline">\(j\)</span>个人（所有卡片的编号和人的一样） <span class="math display">\[f_{i,j}=f_{i-k,j-1}+h[k]\]</span> 然后统计一下答案就好了</p><p>​</p><p>示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cl(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">505</span>,maxk=<span class="number">15</span>,maxs=<span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n,K,h[maxk],f[maxs][maxn],cnt[<span class="number">100005</span>],num[<span class="number">100005</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> up(x,y) (x=max(x,y))</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;K);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n*K;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x),cnt[x]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x),num[x]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;h[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*K;i++)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=i&amp;&amp;k&lt;=K;k++)</span><br><span class="line">   up(f[i][j],f[i-k][j<span class="number">-1</span>]+h[k]);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line"> <span class="keyword">if</span> (cnt[i]&gt;<span class="number">0</span>&amp;&amp;num[i]&gt;<span class="number">0</span>) ans+=f[cnt[i]][num[i]];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/999/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inl
      
    
    </summary>
    
      <category term="题解" scheme="http://oi.linkfqy.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://oi.linkfqy.top/tags/DP/"/>
    
      <category term="Codeforces" scheme="http://oi.linkfqy.top/tags/Codeforces/"/>
    
  </entry>
  
</feed>
